# frozen_string_literal: true

require 'rasn1'
require 'openssl'
require 'time'
require 'base64'

# Implements the model defined by Kerberos5
# - https://datatracker.ietf.org/doc/html/rfc4120
# As well as additions from:
# - https://datatracker.ietf.org/doc/html/rfc6806.html
module Kerberos
  # Adding additional methods to supplement RASN1's dsl
  class KerberosModel < RASN1::Model
    def self.model_name
      name.split('::').last.to_sym
    end

    def self.kerberos_uint32(name, options = {})
      custom_primitive_type_for(name, UInt32, options)
    end

    def self.kerberos_int32(name, options = {})
      custom_primitive_type_for(name, Int32, options)
    end

    def self.kerberos_string(name, options = {})
      custom_primitive_type_for(name, KerberosString, options)
    end

    def self.kerberos_realm(name, options = {})
      custom_primitive_type_for(name, Realm, options)
    end

    def self.kerberos_microseconds(name, options = {})
      custom_primitive_type_for(name, Microseconds, options)
    end

    def self.kerberos_time(name, options = {})
      custom_primitive_type_for(name, KerberosTime, options)
    end

    def self.kerberos_ticket_flags(name, options = {})
      custom_primitive_type_for(name, TicketFlags, options)
    end

    def self.kerberos_kdc_options(name, options = {})
      custom_primitive_type_for(name, KdcOptions, options)
    end

    def self.kerberos_ap_options(name, options = {})
      custom_primitive_type_for(name, ApOptions, options)
    end

    def self.custom_primitive_type_for(name, clazz, options = {})
      options.merge!(name: name)
      proc = proc do |opts|
        clazz.new(options.merge(opts))
      end
      @root = Elem.new(name, proc, nil)
    end

    private_class_method :custom_primitive_type_for
  end

  #
  # 5.2.1.  KerberosString
  #

  # The new (post-RFC 1510) type KerberosString, defined below, is a
  # GeneralString that is constrained to contain only characters in
  # IA5String.
  #
  #       KerberosString  ::= GeneralString (IA5String)
  class KerberosString < RASN1::Types::IA5String
    # GeneralString id value
    ID = 27

    # Get ASN.1 type
    # @return [String]
    def self.type
      'KerberosString'
    end
  end

  #
  # 5.2.3.  KerberosTime
  #

  # KerberosTime    ::= GeneralizedTime -- with no fractional seconds
  class KerberosTime < RASN1::Types::GeneralizedTime
  end

  #
  # 5.2.4.  Constrained Integer Types
  #

  #   Int32           ::= INTEGER (-2147483648..2147483647)
  #                        -- signed values representable in 32 bits
  class Int32 < RASN1::Types::Integer
    # XXX: Add constrained types in accordance to the specification
  end

  #   UInt32          ::= INTEGER (0..4294967295)
  #                        -- unsigned 32 bit values
  class UInt32 < RASN1::Types::Integer
    # XXX: Add constrained types in accordance to the specification
  end

  #   Microseconds    ::= INTEGER (0..999999)
  #                        -- microseconds
  class Microseconds < RASN1::Types::Integer
    # XXX: Add constrained types in accordance to the specification
  end

  #
  #  5.2.2.  Realm and PrincipalName
  #

  #   Realm           ::= KerberosString
  class Realm < KerberosString
  end

  #   PrincipalName   ::= SEQUENCE {
  #            name-type       [0] Int32,
  #            name-string     [1] SEQUENCE OF KerberosString
  #    }
  class PrincipalName < KerberosModel
    sequence model_name,
             content: [
               kerberos_int32(:name_type, explicit: 0, constructed: true),
               sequence_of(:name_string, KerberosString, explicit: 1, constructed: true)
             ]
  end

  #
  # 5.2.9.  Cryptosystem-Related Types
  #

  #   EncryptedData   ::= SEQUENCE {
  #            etype   [0] Int32 -- EncryptionType --,
  #            kvno    [1] UInt32 OPTIONAL,
  #            cipher  [2] OCTET STRING -- ciphertext
  #    }
  class EncryptedData < KerberosModel
    sequence model_name,
             content: [
               kerberos_int32(:etype, explicit: 0, constructed: true),
               kerberos_uint32(:kvno, explicit: 1, constructed: true, optional: true),
               octet_string(:cipher, explicit: 2, constructed: true)
             ]
  end

  #   EncryptionKey   ::= SEQUENCE {
  #            keytype         [0] Int32 -- actually encryption type --,
  #            keyvalue        [1] OCTET STRING
  #    }
  class EncryptionKey < KerberosModel
    sequence model_name,
             content: [
               kerberos_int32(:keytype, explicit: 0, constructed: true),
               octet_string(:keyvalue, explicit: 1, constructed: true)
             ]
  end

  #   Checksum        ::= SEQUENCE {
  #            cksumtype       [0] Int32,
  #            checksum        [1] OCTET STRING
  #    }
  class Checksum < KerberosModel
    sequence model_name,
             content: [
               kerberos_int32(:cksumtype, explicit: 0, constructed: true),
               octet_string(:checksum, explicit: 1, constructed: true)
             ]
  end

  #
  # 5.2.5.  HostAddress and HostAddresses
  #

  #   HostAddress     ::= SEQUENCE  {
  #           addr-type       [0] Int32,
  #           address         [1] OCTET STRING
  #    }
  class HostAddress < KerberosModel
    sequence model_name,
             content: [
               kerberos_int32(:addr_type, explicit: 0, constructed: true),
               octet_string(:address, explicit: 1, constructed: true)
             ]
  end

  #   -- NOTE: HostAddresses is always used as an OPTIONAL field and
  #    -- should not be empty.
  #    HostAddresses   -- NOTE: subtly different from rfc1510,
  #                    -- but has a value mapping and encodes the same
  #            ::= SEQUENCE OF HostAddress
  class HostAddresses < KerberosModel
    sequence_of :addresses, HostAddress
  end

  #
  # 5.2.6.  AuthorizationData
  #

  # Extracted class from AuthorizationData to work with RASN1 models for the following ASN1 structure:
  #      -- NOTE: AuthorizationData is always used as an OPTIONAL field and
  #       -- should not be empty.
  #       AuthorizationData       ::= SEQUENCE OF SEQUENCE {
  #               ad-type         [0] Int32,
  #               ad-data         [1] OCTET STRING
  #       }
  # @see AuthorizationData
  class AuthorizationDataItem < KerberosModel
    sequence model_name,
             content: [
               kerberos_int32(:ad_type, explicit: 0, constructed: true),
               octet_string(:ad_data, explicit: 1, constructed: true)
             ]
  end

  #  -- NOTE: AuthorizationData is always used as an OPTIONAL field and
  #   -- should not be empty.
  #   AuthorizationData       ::= SEQUENCE OF SEQUENCE {
  #           ad-type         [0] Int32,
  #           ad-data         [1] OCTET STRING
  #   }
  class AuthorizationData < KerberosModel
    sequence_of :items, AuthorizationDataItem, constructed: true
  end

  #
  # 5.2.6.1.  IF-RELEVANT
  #

  #   AD-IF-RELEVANT          ::= AuthorizationData
  class AdIfRelevant < AuthorizationData
  end

  #
  # 5.2.6.2.  KDCIssued
  #

  #   AD-KDCIssued            ::= SEQUENCE {
  #            ad-checksum     [0] Checksum,
  #            i-realm         [1] Realm OPTIONAL,
  #            i-sname         [2] PrincipalName OPTIONAL,
  #            elements        [3] AuthorizationData
  #    }
  # TODO: Add test
  class AdKdcIssued < KerberosModel
    sequence model_name,
             content: [
               wrapper(model(:ad_checksum, Checksum), explicit: 0, constructed: true),
               kerberos_realm(:i_realm, explicit: 1, constructed: true, optional: true),
               wrapper(model(:i_sname, PrincipalName), explicit: 2, constructed: true, optional: true),
               wrapper(model(:elements, AuthorizationData), explicit: 3, constructed: true)
             ]
  end

  #
  # 5.2.6.3.  AND-OR
  #

  #     AD-AND-OR               ::= SEQUENCE {
  #            condition-count [0] Int32,
  #            elements        [1] AuthorizationData
  #    }
  # TODO: Add test
  class AdAndOr < KerberosModel
    sequence model_name,
             content: [
               kerberos_int32(:condition_count, explicit: 0, constructed: true),
               wrapper(model(:elements, AuthorizationData), explicit: 8, constructed: true)
             ]
  end

  #
  # 5.2.6.4.  MANDATORY-FOR-KDC

  # AD-MANDATORY-FOR-KDC    ::= AuthorizationData
  class AdMandatoryForKdc < AuthorizationData
  end

  #
  # 5.2.7.  PA-DATA
  #

  # PA-DATA         ::= SEQUENCE {
  #         -- NOTE: first tag is [1], not [0]
  #         padata-type     [1] Int32,
  #         padata-value    [2] OCTET STRING -- might be encoded AP-REQ
  # }
  class PreAuthData < KerberosModel
    sequence model_name,
             content: [
               # Note first tag is 1, not 0
               kerberos_int32(:type, explicit: 1, constructed: true),
               octet_string(:value, explicit: 2, constructed: true)
             ]
  end

  #
  # 5.2.7.2.  Encrypted Timestamp Pre-authentication
  #

  #   PA-ENC-TIMESTAMP        ::= EncryptedData -- PA-ENC-TS-ENC
  class PreAuthEncTimestamp < EncryptedData
  end

  #   PA-ENC-TS-ENC           ::= SEQUENCE {
  #            patimestamp     [0] KerberosTime -- client's time --,
  #            pausec          [1] Microseconds OPTIONAL
  #    }
  class PreAuthEncTimestampDecrypted < KerberosModel
    sequence model_name,
             content: [
               kerberos_time(:pa_timestamp, explicit: 0, constructed: true),
               kerberos_microseconds(:pa_usec, explicit: 1, constructed: true, optional: true)
             ]
  end

  #
  # 5.2.7.4.  PA-ETYPE-INFO
  #

  #   ETYPE-INFO-ENTRY        ::= SEQUENCE {
  #            etype           [0] Int32,
  #            salt            [1] OCTET STRING OPTIONAL
  #    }
  # TODO: Add test
  class ETypeInfoEntry < KerberosModel
    sequence model_name,
             content: [
               kerberos_int32(:etype, explicit: 0, constructed: true),
               octet_string(:salt, explicit: 1, constructed: true)
             ]
  end

  #   ETYPE-INFO              ::= SEQUENCE OF ETYPE-INFO-ENTRY
  # TODO: Add test
  class ETypeInfo < KerberosModel
    sequence_of :items, ETypeInfoEntry, constructed: true
  end

  #
  # 5.2.7.5.  PA-ETYPE-INFO2
  #

  # ETYPE-INFO2-ENTRY       ::= SEQUENCE {
  #         etype           [0] Int32,
  #         salt            [1] KerberosString OPTIONAL,
  #         s2kparams       [2] OCTET STRING OPTIONAL
  # }
  class PreAuthEtypeInfo2 < KerberosModel
    sequence model_name,
             content: [
               kerberos_int32(:etype, explicit: 0, constructed: true),
               kerberos_string(:salt, explicit: 1, constructed: true),
               octet_string(:s2kparams, explicit: 2, constructed: true)
             ]
  end

  #
  # 5.2.8.  KerberosFlags
  #

  #   KerberosFlags   ::= BIT STRING (SIZE (32..MAX))
  #                        -- minimum number of bits shall be sent,
  #                        -- but no fewer than 32
  class KerberosFlags < RASN1::Types::BitString
    # @param [Hash] options
    # @see Base#initialize common options to all ASN.1 types
    def initialize(options = {})
      minimum_kerberos_flags_bit_length = 32
      options[:bit_length] = options[:bit_length] || minimum_kerberos_flags_bit_length
      super
    end
  end

  #
  # 5.3.  Tickets
  #

  # Ticket          ::= [APPLICATION 1] SEQUENCE {
  #         tkt-vno         [0] INTEGER (5),
  #         realm           [1] Realm,
  #         sname           [2] PrincipalName,
  #         enc-part        [3] EncryptedData -- EncTicketPart
  # }
  class Ticket < KerberosModel
    sequence model_name,
             class: :application,
             explicit: 1,
             content: [
               integer(:tkt_vno, explicit: 0, constructed: true),
               kerberos_realm(:realm, explicit: 1, constructed: true),
               wrapper(model(:sname, PrincipalName), explicit: 2, constructed: true),
               wrapper(model(:enc_part, EncryptedData), explicit: 3, constructed: true)
             ]
  end

  # TODO: See if there's a way to have name bit string flags in RASN1
  # ticket_flags_input = "\x03\x05\x00\x50\xE1\x00\x00".b
  class TicketFlags < KerberosFlags
    #  module Flag
    #     RESERVED = 0
    #     FORWARDABLE = 1
    #     FORWARDED = 2
    #     PROXIABLE = 3
    #     PROXY = 4
    #     ALLOW_POST_DATE = 5
    #     POST_DATED = 6
    #     INVALID = 7
    #     RENEWABLE = 8
    #     INITIAL = 9
    #     PRE_AUTHENT = 10
    #     HW_AUTHNET = 11
    #     TRANSITED_POLICY_CHECKED = 12
    #     OK_AS_DELEGATE = 13
    #   end
    #
    #   # @param [Array<Flag>] flags an array of numerical values representing flags
    #   # @return [TicketFlags]
    #   def self.from_flags(flags)
    #     value = 0
    #     flags.each do |flag|
    #       value |= 1 << (31 - flag)
    #     end
    #
    #     new(value)
    #   end
  end

  #   -- encoded Transited field
  #    TransitedEncoding       ::= SEQUENCE {
  #            tr-type         [0] Int32 -- must be registered --,
  #            contents        [1] OCTET STRING
  #    }
  class TransitedEncoding < KerberosModel
    sequence model_name,
             content: [
               kerberos_int32(:tr_type, explicit: 0, constructed: true),
               octet_string(:contents, explicit: 1, constructed: true)
             ]
  end

  #    -- Encrypted part of ticket
  #    EncTicketPart   ::= [APPLICATION 3] SEQUENCE {
  #            flags                   [0] TicketFlags,
  #            key                     [1] EncryptionKey,
  #            crealm                  [2] Realm,
  #            cname                   [3] PrincipalName,
  #            transited               [4] TransitedEncoding,
  #            authtime                [5] KerberosTime,
  #            starttime               [6] KerberosTime OPTIONAL,
  #            endtime                 [7] KerberosTime,
  #            renew-till              [8] KerberosTime OPTIONAL,
  #            caddr                   [9] HostAddresses OPTIONAL,
  #            authorization-data      [10] AuthorizationData OPTIONAL
  #    }
  class EncTicketPart < KerberosModel
    sequence model_name,
             class: :application,
             explicit: 3,
             content: [
               kerberos_ticket_flags(:flags, explicit: 0, constructed: true, bit_length: 32),
               wrapper(model(:key, EncryptionKey), explicit: 1, constructed: true),
               kerberos_realm(:crealm, explicit: 2, constructed: true),
               wrapper(model(:cname, PrincipalName), explicit: 3, constructed: true),
               wrapper(model(:transited, TransitedEncoding), explicit: 4, constructed: true),
               kerberos_time(:authtime, explicit: 5, constructed: true),
               kerberos_time(:start_time, explicit: 6, constructed: true, optional: true),
               kerberos_time(:end_time, explicit: 7, constructed: true),
               kerberos_time(:renew_till, explicit: 8, constructed: true, optional: true),
               # TODO: Get real data for this, as I think there will be issues here
               sequence_of(:caddr, HostAddress, explicit: 9, constructed: true, optional: true),
               wrapper(model(:authorization_data, AuthorizationData), explicit: 10, constructed: true, optional: true)
             ]
  end

  #
  # 5.4.  Specifications for the AS and TGS Exchanges
  # 5.4.1.  KRB_KDC_REQ Definition
  #

  # KDCOptions      ::= KerberosFlags
  #         -- reserved(0),
  #         -- forwardable(1),
  #         -- forwarded(2),
  #         -- proxiable(3),
  #         -- proxy(4),
  #         -- allow-postdate(5),
  #         -- postdated(6),
  #         -- unused7(7),
  #         -- renewable(8),
  #         -- unused9(9),
  #         -- unused10(10),
  #         -- opt-hardware-auth(11),
  #         -- unused12(12),
  #         -- unused13(13),
  # -- 15 is reserved for canonicalize
  #         -- unused15(15),
  # -- 26 was unused in 1510
  #         -- disable-transited-check(26),
  # --
  #         -- renewable-ok(27),
  #         -- enc-tkt-in-skey(28),
  #         -- renew(30),
  #         -- validate(31)
  class KdcOptions < KerberosFlags
  end

  # KDC-REQ-BODY    ::= SEQUENCE {
  #         kdc-options             [0] KDCOptions,
  #         cname                   [1] PrincipalName OPTIONAL
  #                                     -- Used only in AS-REQ --,
  #         realm                   [2] Realm
  #                                     -- Server's realm
  #                                     -- Also client's in AS-REQ --,
  #         sname                   [3] PrincipalName OPTIONAL,
  #         from                    [4] KerberosTime OPTIONAL,
  #         till                    [5] KerberosTime,
  #         rtime                   [6] KerberosTime OPTIONAL,
  #         nonce                   [7] UInt32,
  #         etype                   [8] SEQUENCE OF Int32 -- EncryptionType
  #                                     -- in preference order --,
  #         addresses               [9] HostAddresses OPTIONAL,
  #         enc-authorization-data  [10] EncryptedData OPTIONAL
  #                                     -- AuthorizationData --,
  #         additional-tickets      [11] SEQUENCE OF Ticket OPTIONAL
  #                                        -- NOTE: not empty
  # }
  class KdcReqBody < KerberosModel
    sequence model_name,
             content: [
               kerberos_kdc_options(:kdc_options, explicit: 0, constructed: true),
               wrapper(model(:cname, PrincipalName), explicit: 1, constructed: true, optional: true),
               kerberos_realm(:realm, explicit: 2, constructed: true),
               wrapper(model(:sname, PrincipalName), explicit: 3, constructed: true, optional: true),
               kerberos_time(:from, explicit: 4, constructed: true, optional: true),
               kerberos_time(:till, explicit: 5, constructed: true),
               kerberos_time(:rtime, explicit: 6, constructed: true, optional: true),
               kerberos_uint32(:nonce, explicit: 7, constructed: true),
               sequence_of(:etype, Int32, explicit: 8),
               wrapper(model(:addresses, HostAddresses), explicit: 9, constructed: true, optional: true),
               wrapper(model(:enc_authorization_data, EncryptedData), explicit: 10, constructed: true, optional: true),
               # TODO: Add test for this - might have additional issues
               sequence_of(:additional_tickets, Ticket, explicit: 11, constructed: true, optional: true)
             ]
  end

  # KDC-REQ         ::= SEQUENCE {
  #         -- NOTE: first tag is [1], not [0]
  #         pvno            [1] INTEGER (5) ,
  #         msg-type        [2] INTEGER (10 -- AS -- | 12 -- TGS --),
  #         padata          [3] SEQUENCE OF PA-DATA OPTIONAL
  #                             -- NOTE: not empty --,
  #         req-body        [4] KDC-REQ-BODY
  # }
  class KdcReq < KerberosModel
    sequence model_name,
             class: :application,
             explicit: 10,
             content: [
               # Note first tag is 1, and not 0
               integer(:pvno, explicit: 1, constructed: true),
               integer(:msg_type, explicit: 2, constructed: true),
               sequence_of(:pa_data, PreAuthData, explicit: 3, constructed: true, optional: true),
               wrapper(model(:req_body, KdcReqBody), explicit: 4, constructed: true)
             ]
  end

  # AS-REQ          ::= [APPLICATION 10] KDC-REQ
  class AsReq < KdcReq
    root_options name: model_name,
                 class: :application,
                 explicit: 10
  end

  # TGS-REQ         ::= [APPLICATION 12] KDC-REQ
  class TgsReq < KdcReq
    root_options name: model_name,
                 class: :application,
                 explicit: 12
  end

  #
  # 5.4.2.  KRB_KDC_REP Definition

  # KDC-REP         ::= SEQUENCE {
  #         pvno            [0] INTEGER (5),
  #         msg-type        [1] INTEGER (11 -- AS -- | 13 -- TGS --),
  #         padata          [2] SEQUENCE OF PA-DATA OPTIONAL
  #                                 -- NOTE: not empty --,
  #         crealm          [3] Realm,
  #         cname           [4] PrincipalName,
  #         ticket          [5] Ticket,
  #         enc-part        [6] EncryptedData
  #                                 -- EncASRepPart or EncTGSRepPart,
  #                                 -- as appropriate
  # }
  class KdcRep < KerberosModel
    sequence model_name,
             content: [
               integer(:pvno, explicit: 0, constructed: true),
               # 11 AS, 13 TGS
               integer(:msg_type, explicit: 1, constructed: true),
               sequence_of(:pa_data, PreAuthData, explicit: 2, constructed: true, optional: true),
               kerberos_realm(:crealm, explicit: 3, constructed: true),
               wrapper(model(:cname, PrincipalName), explicit: 4, constructed: true),
               wrapper(model(:ticket, Ticket), explicit: 5, constructed: true),
               wrapper(model(:enc_part, EncryptedData), explicit: 6, constructed: true)
             ]
  end

  # AS-REP          ::= [APPLICATION 11] KDC-REP
  class AsResponse < KdcRep
    root_options name: model_name,
                 class: :application,
                 explicit: 11
  end

  # TGS-REP         ::= [APPLICATION 13] KDC-REP
  class TgsResponse < KdcRep
    root_options name: model_name,
                 class: :application,
                 explicit: 13
  end

  # Extracted class from LastReq to work with RASN1 models for the following ASN1 structure:
  #    LastReq         ::=     SEQUENCE OF SEQUENCE {
  #            lr-type         [0] Int32,
  #            lr-value        [1] KerberosTime
  #    }
  # @see LastReq
  class LastReqItem < KerberosModel
    sequence model_name,
             content: [
               kerberos_int32(:lr_type, explicit: 0, constructed: true),
               kerberos_time(:lr_value, explicit: 1, constructed: true)
             ]
  end

  #    LastReq         ::=     SEQUENCE OF SEQUENCE {
  #            lr-type         [0] Int32,
  #            lr-value        [1] KerberosTime
  #    }
  class LastReq < KerberosModel
    sequence_of :items, LastReqItem, constructed: true
  end

  #  EncKDCRepPart  ::= SEQUENCE {
  #          key             [0] EncryptionKey,
  #          last-req        [1] LastReq,
  #          nonce           [2] UInt32,
  #          key-expiration  [3] KerberosTime OPTIONAL,
  #          flags           [4] TicketFlags,
  #          authtime        [5] KerberosTime,
  #          starttime       [6] KerberosTime OPTIONAL,
  #          endtime         [7] KerberosTime,
  #          renew-till      [8] KerberosTime OPTIONAL,
  #          srealm          [9] Realm,
  #          sname           [10] PrincipalName,
  #          caddr           [11] HostAddresses OPTIONAL
  #          encrypted-pa-data [12] SEQUENCE OF PA-DATA OPTIONAL
  #  }
  # Note that encrypted-pa-data [12] was added by https://datatracker.ietf.org/doc/html/rfc6806.html#section-11
  class EncKdcRepPart < KerberosModel
    sequence model_name,
             content: [
               wrapper(model(:key, EncryptionKey), explicit: 0, constructed: true),
               wrapper(model(:last_req, LastReq), explicit: 1, constructed: true),
               kerberos_uint32(:nonce, explicit: 2, constructed: true),
               kerberos_time(:key_expiration, explicit: 3, constructed: true, optional: true),
               kerberos_ticket_flags(:flags, explicit: 4, constructed: true),
               kerberos_time(:authtime, explicit: 5, constructed: true),
               kerberos_time(:starttime, explicit: 6, constructed: true, optional: true),
               kerberos_time(:endtime, explicit: 7, constructed: true),
               kerberos_time(:renew_till, explicit: 8, constructed: true, optional: true),
               kerberos_realm(:srealm, explicit: 9, constructed: true),
               wrapper(model(:sname, PrincipalName), explicit: 10, constructed: true),
               wrapper(model(:caddr, HostAddresses), explicit: 11, constructed: true, optional: true),
               sequence_of(:encrypted_pa_data, PreAuthData, explicit: 12, constructed: true, optional: true)
             ]
  end

  #  EncASRepPart    ::= [APPLICATION 25] EncKDCRepPart
  class EncAsRepPart < EncKdcRepPart
    root_options name: model_name,
                 class: :application,
                 explicit: 25
  end

  #  EncASRepPart    ::= [APPLICATION 25] EncKDCRepPart
  class EncTgsRepPart < EncKdcRepPart
    root_options name: model_name,
                 class: :application,
                 explicit: 26
  end

  #
  # 5.5.1.  KRB_AP_REQ Definition
  #

  # APOptions       ::= KerberosFlags
  #         -- reserved(0),
  #         -- use-session-key(1),
  #         -- mutual-required(2)
  class ApOptions < KerberosFlags
  end

  #  AP-REQ          ::= [APPLICATION 14] SEQUENCE {
  #         pvno            [0] INTEGER (5),
  #         msg-type        [1] INTEGER (14),
  #         ap-options      [2] APOptions,
  #         ticket          [3] Ticket,
  #         authenticator   [4] EncryptedData -- Authenticator
  # }
  class ApReq < KerberosModel
    sequence model_name,
             class: :application,
             explicit: 14,
             content: [
               integer(:pvno, explicit: 0, constructed: true),
               integer(:msg_type, explicit: 1, constructed: true),
               kerberos_ap_options(:ap_options, explicit: 2, constructed: true),
               wrapper(model(:ticket, Ticket), explicit: 3, constructed: true),
               wrapper(model(:authenticator, EncryptedData), explicit: 4, constructed: true)
             ]
  end

  #-- Unencrypted authenticator
  # Authenticator   ::= [APPLICATION 2] SEQUENCE  {
  #         authenticator-vno       [0] INTEGER (5),
  #         crealm                  [1] Realm,
  #         cname                   [2] PrincipalName,
  #         cksum                   [3] Checksum OPTIONAL,
  #         cusec                   [4] Microseconds,
  #         ctime                   [5] KerberosTime,
  #         subkey                  [6] EncryptionKey OPTIONAL,
  #         seq-number              [7] UInt32 OPTIONAL,
  #         authorization-data      [8] AuthorizationData OPTIONAL
  # }
  class Authenticator < KerberosModel
    sequence model_name,
             class: :application,
             explicit: 2,
             content: [
               integer(:vno, explicit: 0, constructed: true),
               kerberos_realm(:crealm, explicit: 1, constructed: true),
               wrapper(model(:cname, PrincipalName), explicit: 2, constructed: true),
               wrapper(model(:cksum, Checksum), explicit: 3, constructed: true, optional: true),
               kerberos_microseconds(:cusec, explicit: 4, constructed: true),
               kerberos_time(:ctime, explicit: 5, constructed: true, optional: true),
               wrapper(model(:subkey, EncryptionKey), explicit: 6, constructed: true, optional: true),
               kerberos_uint32(:seq_number, explicit: 7, constructed: true, optional: true),
               wrapper(model(:authorization_data, AuthorizationData), explicit: 8, constructed: true, optional: true)
             ]
  end

  #
  # 5.5.2.  KRB_AP_REP Definition
  #

  #    AP-REP          ::= [APPLICATION 15] SEQUENCE {
  #            pvno            [0] INTEGER (5),
  #            msg-type        [1] INTEGER (15),
  #            enc-part        [2] EncryptedData -- EncAPRepPart
  #    }
  class ApRep < KerberosModel
    sequence model_name,
             class: :application,
             explicit: 15,
             content: [
               integer(:pvno, explicit: 0, constructed: true),
               integer(:msg_type, explicit: 1, constructed: true),
               wrapper(model(:enc_part, EncryptedData), explicit: 2, constructed: true)
             ]
  end

  # EncAPRepPart    ::= [APPLICATION 27] SEQUENCE {
  #         ctime           [0] KerberosTime,
  #         cusec           [1] Microseconds,
  #         subkey          [2] EncryptionKey OPTIONAL,
  #         seq-number      [3] UInt32 OPTIONAL
  # }
  class EncApRepPart < KerberosModel
    sequence model_name,
             class: :application,
             explicit: 27,
             content: [
               kerberos_time(:ctime, explicit: 0, constructed: true, optional: true),
               kerberos_microseconds(:cusec, explicit: 1, constructed: true),
               wrapper(model(:subkey, EncryptionKey), explicit: 2, constructed: true, optional: true),
               kerberos_uint32(:seq_number, explicit: 3, constructed: true, optional: true)
             ]
  end

  #
  # 5.6.1.  KRB_SAFE definition
  #

  # TODO

  #
  # 5.7.1.  KRB_PRIV Definition
  #

  # TODO

  #
  # 5.8.  KRB_CRED Message Specification
  # 5.8.1.  KRB_CRED Definition
  #

  #   KRB-CRED        ::= [APPLICATION 22] SEQUENCE {
  #            pvno            [0] INTEGER (5),
  #            msg-type        [1] INTEGER (22),
  #            tickets         [2] SEQUENCE OF Ticket,
  #            enc-part        [3] EncryptedData -- EncKrbCredPart
  #    }
  class KrbCred < KerberosModel
    sequence model_name,
             class: :application,
             explicit: 22,
             content: [
               integer(:pvno, explicit: 0, constructed: true),
               integer(:msg_type, explicit: 1, constructed: true),
               sequence_of(:tickets, Ticket, explicit: 2, constructed: true),
               wrapper(model(:enc_part, EncryptedData), explicit: 3, constructed: true)
             ]
  end

  #   KrbCredInfo     ::= SEQUENCE {
  #            key             [0] EncryptionKey,
  #            prealm          [1] Realm OPTIONAL,
  #            pname           [2] PrincipalName OPTIONAL,
  #            flags           [3] TicketFlags OPTIONAL,
  #            authtime        [4] KerberosTime OPTIONAL,
  #            starttime       [5] KerberosTime OPTIONAL,
  #            endtime         [6] KerberosTime OPTIONAL,
  #            renew-till      [7] KerberosTime OPTIONAL,
  #            srealm          [8] Realm OPTIONAL,
  #            sname           [9] PrincipalName OPTIONAL,
  #            caddr           [10] HostAddresses OPTIONAL
  #    }
  class KrbCredInfo < KerberosModel
    sequence model_name,
             content: [
               wrapper(model(:key, EncryptionKey), explicit: 0, constructed: true),
               kerberos_realm(:prealm, explicit: 1, constructed: true, optional: true),
               wrapper(model(:pname, PrincipalName), explicit: 2, constructed: true, optional: true),
               kerberos_ticket_flags(:flags, explicit: 3, constructed: true, optional: true),
               kerberos_time(:authtime, explicit: 4, constructed: true, optional: true),
               kerberos_time(:starttime, explicit: 5, constructed: true, optional: true),
               kerberos_time(:endtime, explicit: 6, constructed: true, optional: true),
               kerberos_time(:renew_till, explicit: 7, constructed: true, optional: true),
               kerberos_realm(:srealm, explicit: 8, constructed: true, optional: true),
               wrapper(model(:sname, PrincipalName), explicit: 9, constructed: true, optional: true),
               wrapper(model(:caddr, HostAddresses), explicit: 10, constructed: true, optional: true)
             ]
  end

  #   EncKrbCredPart  ::= [APPLICATION 29] SEQUENCE {
  #            ticket-info     [0] SEQUENCE OF KrbCredInfo,
  #            nonce           [1] UInt32 OPTIONAL,
  #            timestamp       [2] KerberosTime OPTIONAL,
  #            usec            [3] Microseconds OPTIONAL,
  #            s-address       [4] HostAddress OPTIONAL,
  #            r-address       [5] HostAddress OPTIONAL
  #    }
  class EncKrbCredPart < KerberosModel
    sequence model_name,
             class: :application,
             explicit: 29,
             content: [
               sequence_of(:ticket_info, KrbCredInfo, explicit: 0, constructed: true),
               kerberos_uint32(:nonce, explicit: 1, constructed: true, optional: true),
               kerberos_time(:timestamp, explicit: 2, constructed: true, optional: true),
               kerberos_microseconds(:usec, explicit: 3, constructed: true, optional: true),
               wrapper(model(:s_address, HostAddresses), explicit: 4, constructed: true, optional: true),
               wrapper(model(:r_address, EncryptedData), explicit: 5, constructed: true, optional: true)
             ]
  end

  #
  # 5.9.1.  KRB_ERROR Definition
  #

  #    KRB-ERROR       ::= [APPLICATION 30] SEQUENCE {
  #            pvno            [0] INTEGER (5),
  #            msg-type        [1] INTEGER (30),
  #            ctime           [2] KerberosTime OPTIONAL,
  #            cusec           [3] Microseconds OPTIONAL,
  #            stime           [4] KerberosTime,
  #            susec           [5] Microseconds,
  #            error-code      [6] Int32,
  #            crealm          [7] Realm OPTIONAL,
  #            cname           [8] PrincipalName OPTIONAL,
  #            realm           [9] Realm -- service realm --,
  #            sname           [10] PrincipalName -- service name --,
  #            e-text          [11] KerberosString OPTIONAL,
  #            e-data          [12] OCTET STRING OPTIONAL
  #    }
  class KrbError < KerberosModel
    sequence model_name,
             class: :application,
             explicit: 30,
             content: [
               integer(:pvno, explicit: 0, constructed: true),
               integer(:msg_type, explicit: 1, constructed: true),
               kerberos_time(:ctime, explicit: 2, constructed: true, optional: true),
               kerberos_microseconds(:cusec, explicit: 3, constructed: true, optional: true),
               kerberos_time(:stime, explicit: 4, constructed: true),
               kerberos_microseconds(:susec, explicit: 5, constructed: true),
               kerberos_uint32(:error_code, explicit: 6, constructed: true),
               kerberos_realm(:crealm, explicit: 7, constructed: true, optional: true),
               wrapper(model(:cname, PrincipalName), explicit: 8, constructed: true, optional: true),
               kerberos_realm(:realm, explicit: 9, constructed: true),
               wrapper(model(:sname, PrincipalName), explicit: 10, constructed: true),
               kerberos_string(:e_text, explicit: 11, constructed: true, optional: true),
               octet_string(:e_data, explicit: 12, constructed: true, optional: true)
             ]
  end
end

RSpec.shared_examples_for 'a model that produces the same binary data when to_der is called' do
  let(:input_data) { valid_data }

  describe '#to_der' do
    it 'produces the same binary data when to_der is called' do
      expect(described_class.parse(input_data).to_der).to eq(input_data)
    end
  end
end

RSpec.describe Kerberos do
  describe Kerberos::EncryptedData do
    let(:valid_data) do
      "\x30\x3d\xa0\x03\x02\x01\x17\xa2\x36\x04\x34\x60\xae\x53\xa5\x0b" \
      "\x56\x2e\x46\x61\xd9\xd6\x89\x98\xfc\x79\x9d\x45\x73\x7d\x0d\x8a" \
      "\x78\x84\x4d\xd7\x7c\xc6\x50\x08\x8d\xab\x22\x79\xc3\x8d\xd3\xaf" \
      "\x9f\x5e\xb7\xb8\x9b\x57\xc5\xc9\xc5\xea\x90\x89\xc3\x63\x58".b
    end

    it_behaves_like 'a model that produces the same binary data when to_der is called'

    describe '#parse' do
      it 'parses the data successfully' do
        expected = {
          EncryptedData: {
            etype: 23,
            cipher: "`\xAES\xA5\vV.Fa\xD9\xD6\x89\x98\xFCy\x9DEs}\r\x8Ax\x84M\xD7|\xC6P\b\x8D\xAB\"y\xC3\x8D\xD3\xAF\x9F^\xB7\xB8\x9BW\xC5\xC9\xC5\xEA\x90\x89\xC3cX".b
          }
        }
        expect(described_class.parse(valid_data).to_h).to eq(expected)
      end
    end
  end

  describe Kerberos::HostAddress do
    let(:valid_data) do
      "\x30\x0d\xa0\x03\x02\x01\x02\xa1\x06\x04\x04\xc0\x00\x02\x02"
        .b
    end

    it_behaves_like 'a model that produces the same binary data when to_der is called'

    describe '#parse' do
      it 'parses the data successfully' do
        expected = {
          HostAddress: {
            addr_type: 2,
            address: "\xC0\x00\x02\x02".b
          }
        }
        expect(described_class.parse(valid_data).to_h).to eq(expected)
      end
    end
  end

  describe Kerberos::Ticket do
    let(:valid_data) do
      "\x61\x82\x01\x0c" \
        "\x30\x82\x01\x08\xa0\x03\x02\x01\x05\xa1\x0c\x1b\x0a\x44\x45\x4d" \
        "\x4f\x2e\x4c\x4f\x43\x41\x4c\xa2\x1f\x30\x1d\xa0\x03\x02\x01\x01" \
        "\xa1\x16\x30\x14\x1b\x06\x6b\x72\x62\x74\x67\x74\x1b\x0a\x44\x45" \
        "\x4d\x4f\x2e\x4c\x4f\x43\x41\x4c\xa3\x81\xd1\x30\x81\xce\xa0\x03" \
        "\x02\x01\x17\xa1\x03\x02\x01\x02\xa2\x81\xc1\x04\x81\xbe\x55\xe7" \
        "\x45\xc3\x6f\xa2\x28\x47\xab\x9c\x86\x13\xeb\x1d\xa8\x98\xec\x67" \
        "\x1c\x1f\x15\x46\x6b\xe0\x4a\xf2\x4d\x3d\xf7\xe4\x31\x7a\x4f\x15" \
        "\x2f\x60\xdd\x98\xa8\xe1\x97\x6b\x6f\xc1\x24\x46\x6c\xa9\x1e\xe2" \
        "\x36\x27\xe3\xfa\x99\x0c\x9b\x77\x0c\xe2\x58\x02\x68\xc4\x54\x2a" \
        "\x2c\x5d\x6c\x4b\xc8\xbc\x04\x8f\x0a\x44\x27\x78\xdc\x4b\x3e\x01" \
        "\xbe\xac\xf7\x8e\x7a\x50\xc6\x3e\x77\xd9\x65\x24\xd5\x1a\x18\xa1" \
        "\x84\x71\x85\x98\x2f\x54\x8b\x56\xe3\xfb\x2c\xe2\x30\x84\x06\x55" \
        "\x55\xea\x31\x8b\x84\x00\xe3\x1a\xc3\xa8\xc2\xac\xc0\x78\x3f\x47" \
        "\x68\x74\xcc\x62\xa6\xcf\xf4\x6b\xae\xaf\x27\xde\x1a\x4d\xb7\xa8" \
        "\x9f\x76\x7a\x79\x2a\x42\x12\x7b\xd2\xbe\xc9\x98\x7c\x44\x38\x40" \
        "\xbd\x49\xcd\x3e\xdc\x65\xc7\x8b\x44\xf5\xa5\xd4\x66\x0e\xfd\x58" \
        "\x9d\x31\x39\x27\xd7\xfc\x81\x07\xa3\x2a\x1c\x3c".b
    end

    it_behaves_like 'a model that produces the same binary data when to_der is called'

    describe '#parse' do
      it 'parses the data successfully' do
        expected = {
          Ticket: {
            tkt_vno: 5,
            realm: 'DEMO.LOCAL',
            sname: {
              name_type: 1,
              name_string: [
                'krbtgt',
                'DEMO.LOCAL'
              ]
            },
            enc_part: {
              kvno: 2,
              etype: 23,
              cipher: "U\xE7E\xC3o\xA2(G\xAB\x9C\x86\x13\xEB\x1D\xA8\x98\xECg\x1C\x1F\x15Fk\xE0J\xF2M=\xF7\xE41zO\x15/`\xDD\x98\xA8\xE1\x97ko\xC1$Fl\xA9\x1E\xE26'\xE3\xFA\x99\f\x9Bw\f\xE2X\x02h\xC4T*,]lK\xC8\xBC\x04\x8F\nD'x\xDCK>\x01\xBE\xAC\xF7\x8EzP\xC6>w\xD9e$\xD5\x1A\x18\xA1\x84q\x85\x98/T\x8BV\xE3\xFB,\xE20\x84\x06UU\xEA1\x8B\x84\x00\xE3\x1A\xC3\xA8\xC2\xAC\xC0x?Ght\xCCb\xA6\xCF\xF4k\xAE\xAF'\xDE\x1AM\xB7\xA8\x9Fvzy*B\x12{\xD2\xBE\xC9\x98|D8@\xBDI\xCD>\xDCe\xC7\x8BD\xF5\xA5\xD4f\x0E\xFDX\x9D19'\xD7\xFC\x81\a\xA3*\x1C<".b
            }
          }
        }

        expect(described_class.parse(valid_data).to_h).to eq(expected)
      end
    end
  end

  describe Kerberos::Checksum do
    let(:valid_data) do
      "\x30\x19\xa0\x03\x02\x01\x07\xa1\x12\x04\x10\x9e\xf0\x84\xd6\x81" \
      "\xe5\x16\x02\x32\xb1\xc3\x4e\xad\x83\x1d\x43"
        .b
    end

    it_behaves_like 'a model that produces the same binary data when to_der is called'

    describe '#parse' do
      it 'parses the data successfully' do
        expected = {
          Checksum: {
            cksumtype: 7,
            checksum: "\x9E\xF0\x84\xD6\x81\xE5\x16\x022\xB1\xC3N\xAD\x83\x1DC".b
          }
        }
        expect(described_class.parse(valid_data).to_h).to eq(expected)
      end
    end
  end

  describe Kerberos::PrincipalName do
    let(:valid_data) do
      "\x30\x1d\xa0\x03\x02\x01\x01\xa1" \
        "\x16\x30\x14\x1b\x06\x6b\x72\x62" \
        "\x74\x67\x74\x1b\x0a\x44\x45\x4d" \
        "\x4f\x2e\x4c\x4f\x43\x41\x4c".b
    end

    it_behaves_like 'a model that produces the same binary data when to_der is called'

    describe '#parse' do
      it 'parses the data successfully' do
        expected = {
          PrincipalName: {
            name_type: 1,
            name_string: ['krbtgt', 'DEMO.LOCAL']
          }
        }
        expect(described_class.parse(valid_data).to_h).to eq(expected)
      end
    end
  end

  describe Kerberos::PreAuthEncTimestampDecrypted do
    let(:valid_data) do
      "\x30\x1a\xa0\x11\x18\x0f\x32\x30" \
      "\x31\x34\x31\x32\x30\x39\x30\x31" \
      "\x30\x39\x30\x39\x5a\xa1\x05\x02" \
      "\x03\x08\xfc\xc8".b
    end

    it_behaves_like 'a model that produces the same binary data when to_der is called'

    describe '#parse' do
      it 'parses the data successfully' do
        expected = {
          PreAuthEncTimestampDecrypted: {
            pa_timestamp: Time.parse('2014-12-09 01:09:09 UTC'),
            pa_usec: 589000
          }
        }
        expect(described_class.parse(valid_data).to_h).to eq(expected)
      end
    end
  end

  describe Kerberos::PreAuthEtypeInfo2 do
    let(:valid_data) do
      "0\x1A\xA0\x03\x02\x01\x17\xA1\x06\e\x04salt\xA2\v\x04\ts2kparams"
        .b
    end

    it_behaves_like 'a model that produces the same binary data when to_der is called'

    describe '#parse' do
      it 'parses the data successfully' do
        expected = {
          PreAuthEtypeInfo2: {
            etype: 23,
            salt: 'salt',
            s2kparams: 's2kparams'
          }
        }
        expect(described_class.parse(valid_data).to_h).to eq(expected)
      end
    end
  end

  describe Kerberos::TransitedEncoding do
    let(:valid_data) do
      "0\t\xA0\x03\x02\x01\x00\xA1\x02\x04\x00"
        .b
    end

    it_behaves_like 'a model that produces the same binary data when to_der is called'

    describe '#parse' do
      it 'parses the data successfully' do
        expected = {
          TransitedEncoding: {
            tr_type: 0,
            contents: ''
          }
        }
        expect(described_class.parse(valid_data).to_h).to eq(expected)
      end
    end
  end

  describe Kerberos::EncryptionKey do
    let(:valid_data) do
      "\x30\x29\xa0\x03\x02\x01\x12\xa1\x22\x04\x20\x2f\x1a\x35\x46\x45" \
      "\xc6\xf2\x9f\xfe\xad\x19\x9d\x57\x88\x96\x6a\xc1\xc0\xd9\x0c\x76" \
      "\x9b\xac\x56\x3f\x1c\x94\x1d\x34\xd5\xdb\x81"
        .b
    end

    it_behaves_like 'a model that produces the same binary data when to_der is called'

    describe '#parse' do
      it 'parses the data successfully' do
        expected = {
          EncryptionKey: {
            keytype: 18,
            keyvalue: "/\x1A5FE\xC6\xF2\x9F\xFE\xAD\x19\x9DW\x88\x96j\xC1\xC0\xD9\fv\x9B\xACV?\x1C\x94\x1D4\xD5\xDB\x81".b
          }
        }
        expect(described_class.parse(valid_data).to_h).to eq(expected)
      end
    end
  end

  describe Kerberos::EncTicketPart do
    let(:valid_data) do
      "\x63\x82\x03\x2f\x30\x82\x03\x2b\xa0\x07\x03\x05\x00\x50\xa0\x00" \
      "\x00\xa1\x1b\x30\x19\xa0\x03\x02\x01\x17\xa1\x12\x04\x10\x4b\x55" \
      "\x4a\x51\x43\x73\x45\x52\x57\x55\x64\x49\x4b\x48\x6b\x78\xa2\x0a" \
      "\x1b\x08\x44\x57\x2e\x4c\x4f\x43\x41\x4c\xa3\x17\x30\x15\xa0\x03" \
      "\x02\x01\x01\xa1\x0e\x30\x0c\x1b\x0a\x66\x61\x6b\x65\x5f\x6d\x79" \
      "\x73\x71\x6c\xa4\x0b\x30\x09\xa0\x03\x02\x01\x00\xa1\x02\x04\x00" \
      "\xa5\x11\x18\x0f\x32\x30\x32\x32\x30\x36\x32\x30\x31\x30\x33\x39" \
      "\x34\x31\x5a\xa6\x11\x18\x0f\x32\x30\x32\x32\x30\x36\x32\x30\x31" \
      "\x30\x33\x39\x34\x31\x5a\xa7\x11\x18\x0f\x32\x30\x33\x32\x30\x36" \
      "\x31\x37\x31\x30\x33\x39\x34\x31\x5a\xa8\x11\x18\x0f\x32\x30\x33" \
      "\x32\x30\x36\x31\x37\x31\x30\x33\x39\x34\x31\x5a\xaa\x82\x02\x83" \
      "\x30\x82\x02\x7f\x30\x82\x02\x7b\xa0\x03\x02\x01\x01\xa1\x82\x02" \
      "\x72\x04\x82\x02\x6e\x30\x82\x02\x6a\x30\x82\x02\x66\xa0\x04\x02" \
      "\x02\x00\x80\xa1\x82\x02\x5c\x04\x82\x02\x58\x04\x00\x00\x00\x00" \
      "\x00\x00\x00\x01\x00\x00\x00\xbc\x01\x00\x00\x48\x00\x00\x00\x00" \
      "\x00\x00\x00\x0a\x00\x00\x00\x1e\x00\x00\x00\x08\x02\x00\x00\x00" \
      "\x00\x00\x00\x06\x00\x00\x00\x14\x00\x00\x00\x28\x02\x00\x00\x00" \
      "\x00\x00\x00\x07\x00\x00\x00\x14\x00\x00\x00\x40\x02\x00\x00\x00" \
      "\x00\x00\x00\x01\x10\x08\x00\xcc\xcc\xcc\xcc\xac\x01\x00\x00\xcc" \
      "\xcc\xcc\xcc\x6c\x5c\x00\x00\x80\x94\x11\x0c\x92\x84\xd8\x01\xff" \
      "\xff\xff\xff\xff\xff\xff\x7f\xff\xff\xff\xff\xff\xff\xff\x7f\x80" \
      "\x94\x11\x0c\x92\x84\xd8\x01\x00\x00\x00\x00\x00\x00\x00\x00\xff" \
      "\xff\xff\xff\xff\xff\xff\x7f\x14\x00\x14\x00\x97\xdf\x00\x00\x00" \
      "\x00\x00\x00\x60\xe2\x00\x00\x00\x00\x00\x00\x84\x9d\x00\x00\x00" \
      "\x00\x00\x00\x8c\x3b\x00\x00\x00\x00\x00\x00\x94\xc2\x00\x00\x00" \
      "\x00\x00\x00\x7e\xc9\x00\x00\xf4\x01\x00\x00\xf4\x01\x00\x00\x01" \
      "\x02\x00\x00\x05\x00\x00\x00\x72\x34\x00\x00\x00\x00\x00\x00\x00" \
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" \
      "\x00\x00\x00\x83\x88\x00\x00\x10\x00\x10\x00\x9c\x94\x00\x00\xa2" \
      "\xd7\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x02\x00\x00\x00" \
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" \
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" \
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0a" \
      "\x00\x00\x00\x00\x00\x00\x00\x0a\x00\x00\x00\x66\x00\x61\x00\x6b" \
      "\x00\x65\x00\x5f\x00\x6d\x00\x79\x00\x73\x00\x71\x00\x6c\x00\x00" \
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" \
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" \
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" \
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\x00\x00\x00\x01" \
      "\x02\x00\x00\x07\x00\x00\x00\x00\x02\x00\x00\x07\x00\x00\x00\x08" \
      "\x02\x00\x00\x07\x00\x00\x00\x06\x02\x00\x00\x07\x00\x00\x00\x07" \
      "\x02\x00\x00\x07\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" \
      "\x00\x00\x00\x08\x00\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00\x44" \
      "\x00\x57\x00\x2e\x00\x4c\x00\x4f\x00\x43\x00\x41\x00\x4c\x00\x05" \
      "\x00\x00\x00\x01\x05\x00\x00\x00\x00\x00\x05\x15\x00\x00\x00\x02" \
      "\x87\x5a\x55\xfd\x66\x7b\xcc\xf7\xbc\xaf\x16\xf4\x01\x00\x00\x00" \
      "\x00\x00\x00\x80\x94\x11\x0c\x92\x84\xd8\x01\x14\x00\x66\x00\x61" \
      "\x00\x6b\x00\x65\x00\x5f\x00\x6d\x00\x79\x00\x73\x00\x71\x00\x6c" \
      "\x00\x00\x00\x76\xff\xff\xff\xe2\x58\xd7\xf5\x06\x17\x64\x9c\x77" \
      "\xc6\xff\x16\x13\x16\x5d\xe3\x00\x00\x00\x00\x76\xff\xff\xff\xaf" \
      "\x64\xea\x1d\x9f\xa0\x63\xe9\xb1\x04\xd2\x53\xc4\x82\xce\x61\x00" \
      "\x00\x00\x00"
        .b
    end

    it_behaves_like 'a model that produces the same binary data when to_der is called'

    describe '#parse' do
      it 'parses the data successfully' do
        expected = {
          EncTicketPart: {
            flags: "P\xA0\x00\x00".b,
            key: {
              keytype: 23,
              keyvalue: 'KUJQCsERWUdIKHkx'.b
            },
            crealm: 'DW.LOCAL',
            cname: {
              name_type: 1,
              name_string: [
                'fake_mysql'
              ]
            },
            transited: {
              tr_type: 0,
              contents: ''
            },
            authtime: Time.parse('2022-06-20 10:39:41 +0000'),
            start_time: Time.parse('2022-06-20 10:39:41 +0000'),
            end_time: Time.parse('2032-06-17 10:39:41 +0000'),
            renew_till: Time.parse('2032-06-17 10:39:41 +0000'),
            authorization_data: [
              {
                ad_type: 1,
                ad_data: "0\x82\x02j0\x82\x02f\xA0\x04\x02\x02\x00\x80\xA1\x82\x02\\\x04\x82\x02X\x04\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\xBC\x01\x00\x00H\x00\x00\x00\x00\x00\x00\x00\n\x00\x00\x00\x1E\x00\x00\x00\b\x02\x00\x00\x00\x00\x00\x00\x06\x00\x00\x00\x14\x00\x00\x00(\x02\x00\x00\x00\x00\x00\x00\a\x00\x00\x00\x14\x00\x00\x00@\x02\x00\x00\x00\x00\x00\x00\x01\x10\b\x00\xCC\xCC\xCC\xCC\xAC\x01\x00\x00\xCC\xCC\xCC\xCCl\\\x00\x00\x80\x94\x11\f\x92\x84\xD8\x01\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\x80\x94\x11\f\x92\x84\xD8\x01\x00\x00\x00\x00\x00\x00\x00\x00\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\x14\x00\x14\x00\x97\xDF\x00\x00\x00\x00\x00\x00`\xE2\x00\x00\x00\x00\x00\x00\x84\x9D\x00\x00\x00\x00\x00\x00\x8C;\x00\x00\x00\x00\x00\x00\x94\xC2\x00\x00\x00\x00\x00\x00~\xC9\x00\x00\xF4\x01\x00\x00\xF4\x01\x00\x00\x01\x02\x00\x00\x05\x00\x00\x00r4\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x83\x88\x00\x00\x10\x00\x10\x00\x9C\x94\x00\x00\xA2\xD7\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\n\x00\x00\x00\x00\x00\x00\x00\n\x00\x00\x00f\x00a\x00k\x00e\x00_\x00m\x00y\x00s\x00q\x00l\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\x00\x00\x00\x01\x02\x00\x00\a\x00\x00\x00\x00\x02\x00\x00\a\x00\x00\x00\b\x02\x00\x00\a\x00\x00\x00\x06\x02\x00\x00\a\x00\x00\x00\a\x02\x00\x00\a\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\b\x00\x00\x00\x00\x00\x00\x00\b\x00\x00\x00D\x00W\x00.\x00L\x00O\x00C\x00A\x00L\x00\x05\x00\x00\x00\x01\x05\x00\x00\x00\x00\x00\x05\x15\x00\x00\x00\x02\x87ZU\xFDf{\xCC\xF7\xBC\xAF\x16\xF4\x01\x00\x00\x00\x00\x00\x00\x80\x94\x11\f\x92\x84\xD8\x01\x14\x00f\x00a\x00k\x00e\x00_\x00m\x00y\x00s\x00q\x00l\x00\x00\x00v\xFF\xFF\xFF\xE2X\xD7\xF5\x06\x17d\x9Cw\xC6\xFF\x16\x13\x16]\xE3\x00\x00\x00\x00v\xFF\xFF\xFF\xAFd\xEA\x1D\x9F\xA0c\xE9\xB1\x04\xD2S\xC4\x82\xCEa\x00\x00\x00\x00".b
              }
            ]
          }
        }

        expect(described_class.parse(valid_data).to_h).to eq(expected)
      end
    end
  end

  describe Kerberos::AsResponse do
    let(:valid_data) do
      "\x6b\x82\x02\x53\x30\x82\x02\x4f\xa0\x03\x02\x01" \
      "\x05\xa1\x03\x02\x01\x0b\xa3\x0c\x1b\x0a\x44\x45\x4d\x4f\x2e\x4c" \
      "\x4f\x43\x41\x4c\xa4\x11\x30\x0f\xa0\x03\x02\x01\x01\xa1\x08\x30" \
      "\x06\x1b\x04\x6a\x75\x61\x6e\xa5\x82\x01\x10\x61\x82\x01\x0c\x30" \
      "\x82\x01\x08\xa0\x03\x02\x01\x05\xa1\x0c\x1b\x0a\x44\x45\x4d\x4f" \
      "\x2e\x4c\x4f\x43\x41\x4c\xa2\x1f\x30\x1d\xa0\x03\x02\x01\x01\xa1" \
      "\x16\x30\x14\x1b\x06\x6b\x72\x62\x74\x67\x74\x1b\x0a\x44\x45\x4d" \
      "\x4f\x2e\x4c\x4f\x43\x41\x4c\xa3\x81\xd1\x30\x81\xce\xa0\x03\x02" \
      "\x01\x17\xa1\x03\x02\x01\x02\xa2\x81\xc1\x04\x81\xbe\x55\xe7\x45" \
      "\xc3\x6f\xa2\x28\x47\xab\x9c\x86\x13\xeb\x1d\xa8\x98\xec\x67\x1c" \
      "\x1f\x15\x46\x6b\xe0\x4a\xf2\x4d\x3d\xf7\xe4\x31\x7a\x4f\x15\x2f" \
      "\x60\xdd\x98\xa8\xe1\x97\x6b\x6f\xc1\x24\x46\x6c\xa9\x1e\xe2\x36" \
      "\x27\xe3\xfa\x99\x0c\x9b\x77\x0c\xe2\x58\x02\x68\xc4\x54\x2a\x2c" \
      "\x5d\x6c\x4b\xc8\xbc\x04\x8f\x0a\x44\x27\x78\xdc\x4b\x3e\x01\xbe" \
      "\xac\xf7\x8e\x7a\x50\xc6\x3e\x77\xd9\x65\x24\xd5\x1a\x18\xa1\x84" \
      "\x71\x85\x98\x2f\x54\x8b\x56\xe3\xfb\x2c\xe2\x30\x84\x06\x55\x55" \
      "\xea\x31\x8b\x84\x00\xe3\x1a\xc3\xa8\xc2\xac\xc0\x78\x3f\x47\x68" \
      "\x74\xcc\x62\xa6\xcf\xf4\x6b\xae\xaf\x27\xde\x1a\x4d\xb7\xa8\x9f" \
      "\x76\x7a\x79\x2a\x42\x12\x7b\xd2\xbe\xc9\x98\x7c\x44\x38\x40\xbd" \
      "\x49\xcd\x3e\xdc\x65\xc7\x8b\x44\xf5\xa5\xd4\x66\x0e\xfd\x58\x9d" \
      "\x31\x39\x27\xd7\xfc\x81\x07\xa3\x2a\x1c\x3c\xa6\x82\x01\x0c\x30" \
      "\x82\x01\x08\xa0\x03\x02\x01\x17\xa1\x03\x02\x01\x01\xa2\x81\xfb" \
      "\x04\x81\xf8\x80\x07\x78\x36\x16\xc5\x67\x63\x83\x3b\xf8\x42\x66" \
      "\x8a\xeb\xe9\xfe\xba\x82\x82\x1f\x3d\x15\x4f\x5b\x70\x19\x5c\xe2" \
      "\x02\xd6\xa5\x87\x53\xbf\x77\x23\x5b\x32\x29\xde\x53\xe6\x9d\xe9" \
      "\xa5\x38\x71\x42\xf7\xfe\x93\x3b\x30\x4f\xbd\x86\xcd\x2b\x88\x84" \
      "\xb7\x40\x76\x26\xfe\xd6\x39\xa0\x69\xa3\x46\x86\xc6\xdf\x1d\xb2" \
      "\x0a\x91\xc5\x6c\x55\x56\xfe\xfb\xce\x4c\x57\x74\x6c\x2a\xfc\xbc" \
      "\x6e\x7a\x19\x76\x20\xe8\x61\xc2\x99\xd0\x85\x73\x99\xc5\x19\x58" \
      "\x5e\xae\xc4\xbb\x14\xac\x37\xc9\x80\xaa\xd4\x9d\x12\xc6\x37\x52" \
      "\xb7\xf0\x6c\x2b\xed\xfc\xeb\xf6\x3f\x20\xbd\x51\x92\x4d\x09\xe5" \
      "\x87\x37\xa7\xfa\x5a\x3d\x01\x76\xf3\x07\xb1\x98\x27\xb5\xac\xb7" \
      "\x98\xa4\xa6\x77\xf1\xa3\xf9\xf1\x9f\x4e\x8e\x9c\x6d\x1a\x59\x0c" \
      "\x9d\xc6\x3b\xa9\x72\x53\x6d\xd5\x1d\x00\x5c\x2a\xe8\xc8\xc4\xb8" \
      "\x9c\x1f\x05\x9a\x46\xe7\xa9\xba\x78\xa9\xa5\x0d\x90\xb9\xa8\x3d" \
      "\x9d\xc2\x64\xe7\x8c\xe0\xda\x82\xe8\xd0\x3c\xd6\xeb\xc4\x06\xf5" \
      "\x19\x9e\x34\x72\x46\x12\xba\x06\x5a\x75\x95\x01\x7b\x35\x40\x32" \
      "\xa2\x5c\x07\x21\x42\x27\xe0\xdc\x9b\xfc\x47".b
    end

    it_behaves_like 'a model that produces the same binary data when to_der is called'

    describe '#parse' do
      it 'parses the data successfully' do
        expected = {
          AsResponse: {
            pvno: 5,
            msg_type: 11,
            crealm: 'DEMO.LOCAL',
            cname: {
              name_type: 1,
              name_string: ['juan']
            },
            ticket: {
              tkt_vno: 5,
              realm: 'DEMO.LOCAL',
              sname: {
                name_type: 1,
                name_string: ['krbtgt', 'DEMO.LOCAL']
              },
              enc_part: {
                etype: 23,
                kvno: 2,
                cipher: "U\xE7E\xC3o\xA2(G\xAB\x9C\x86\x13\xEB\x1D\xA8\x98\xECg\x1C\x1F\x15Fk\xE0J\xF2M=\xF7\xE41zO\x15/`\xDD\x98\xA8\xE1\x97ko\xC1$Fl\xA9\x1E\xE26'\xE3\xFA\x99\f\x9Bw\f\xE2X\x02h\xC4T*,]lK\xC8\xBC\x04\x8F\nD'x\xDCK>\x01\xBE\xAC\xF7\x8EzP\xC6>w\xD9e$\xD5\x1A\x18\xA1\x84q\x85\x98/T\x8BV\xE3\xFB,\xE20\x84\x06UU\xEA1\x8B\x84\x00\xE3\x1A\xC3\xA8\xC2\xAC\xC0x?Ght\xCCb\xA6\xCF\xF4k\xAE\xAF'\xDE\x1AM\xB7\xA8\x9Fvzy*B\x12{\xD2\xBE\xC9\x98|D8@\xBDI\xCD>\xDCe\xC7\x8BD\xF5\xA5\xD4f\x0E\xFDX\x9D19'\xD7\xFC\x81\a\xA3*\x1C<".b
              }
            },
            enc_part: {
              etype: 23,
              kvno: 1,
              cipher: "\x80\ax6\x16\xC5gc\x83;\xF8Bf\x8A\xEB\xE9\xFE\xBA\x82\x82\x1F=\x15O[p\x19\\\xE2\x02\xD6\xA5\x87S\xBFw#[2)\xDES\xE6\x9D\xE9\xA58qB\xF7\xFE\x93;0O\xBD\x86\xCD+\x88\x84\xB7@v&\xFE\xD69\xA0i\xA3F\x86\xC6\xDF\x1D\xB2\n\x91\xC5lUV\xFE\xFB\xCELWtl*\xFC\xBCnz\x19v \xE8a\xC2\x99\xD0\x85s\x99\xC5\x19X^\xAE\xC4\xBB\x14\xAC7\xC9\x80\xAA\xD4\x9D\x12\xC67R\xB7\xF0l+\xED\xFC\xEB\xF6? \xBDQ\x92M\t\xE5\x877\xA7\xFAZ=\x01v\xF3\a\xB1\x98'\xB5\xAC\xB7\x98\xA4\xA6w\xF1\xA3\xF9\xF1\x9FN\x8E\x9Cm\x1AY\f\x9D\xC6;\xA9rSm\xD5\x1D\x00\\*\xE8\xC8\xC4\xB8\x9C\x1F\x05\x9AF\xE7\xA9\xBAx\xA9\xA5\r\x90\xB9\xA8=\x9D\xC2d\xE7\x8C\xE0\xDA\x82\xE8\xD0<\xD6\xEB\xC4\x06\xF5\x19\x9E4rF\x12\xBA\x06Zu\x95\x01{5@2\xA2\\\a!B'\xE0\xDC\x9B\xFCG".b
            }
          }
        }

        expect(described_class.parse(valid_data).to_h).to eq(expected)
      end
    end
  end

  describe Kerberos::TgsResponse do
    let(:valid_data) do
      "\x6d\x82\x04\xad\x30\x82\x04\xa9\xa0\x03\x02\x01\x05\xa1\x03\x02" \
        "\x01\x0d\xa3\x0c\x1b\x0a\x44\x45\x4d\x4f\x2e\x4c\x4f\x43\x41\x4c" \
        "\xa4\x11\x30\x0f\xa0\x03\x02\x01\x01\xa1\x08\x30\x06\x1b\x04\x6a" \
        "\x75\x61\x6e\xa5\x82\x03\x85\x61\x82\x03\x81\x30\x82\x03\x7d\xa0" \
        "\x03\x02\x01\x05\xa1\x0c\x1b\x0a\x44\x45\x4d\x4f\x2e\x4c\x4f\x43" \
        "\x41\x4c\xa2\x1f\x30\x1d\xa0\x03\x02\x01\x01\xa1\x16\x30\x14\x1b" \
        "\x06\x6b\x72\x62\x74\x67\x74\x1b\x0a\x44\x45\x4d\x4f\x2e\x4c\x4f" \
        "\x43\x41\x4c\xa3\x82\x03\x45\x30\x82\x03\x41\xa0\x03\x02\x01\x17" \
        "\xa1\x03\x02\x01\x02\xa2\x82\x03\x33\x04\x82\x03\x2f\x25\x3d\x74" \
        "\x47\xc7\x96\x38\xb3\xc3\xad\x6c\x0a\x35\x9d\xd3\x56\xf2\x26\x16" \
        "\x69\x7b\x2b\xe3\x70\xe6\x65\xf2\x89\x5d\x8e\x90\x00\x9e\xf7\xc7" \
        "\x54\x66\xab\xdd\xd9\xf8\x1d\x96\xf9\x89\x7f\x3b\x1f\x9f\x28\xa1" \
        "\xec\xee\x05\xd3\x8e\x29\xd6\xcf\xf8\x7b\x4e\x50\x31\x3a\xc0\x7e" \
        "\xcd\xcc\x1c\x65\xe1\x34\xb8\x3c\xa1\xe0\x8d\x0b\x05\xbf\xe0\x42" \
        "\x89\xf0\xcd\x58\x09\x4f\xa8\xb3\xef\x94\x0f\x2d\xa2\xcd\xda\x72" \
        "\xa9\x16\x1a\x9f\x0d\xe3\x9e\xcc\x5a\x3a\xe5\x62\x05\x46\x87\x3b" \
        "\xb9\x4e\xa5\xe8\xbf\x08\x8e\x44\x91\x6f\x83\xfe\x37\x50\xf5\xc5" \
        "\x9c\x2a\x67\x2b\xe7\x76\xa8\x3e\xbf\x40\x43\x5d\xc4\x24\x3d\x59" \
        "\x1c\x62\xdf\x08\x61\x41\x06\xf6\xf0\xd1\xeb\xaa\x30\x23\xd4\xaa" \
        "\xf3\x8c\xd5\x9f\x8b\x48\xcd\xd1\xbe\x35\xe2\x93\x3b\xbc\xd8\xaa" \
        "\x72\xf2\xef\xb7\xa6\xea\x5a\xca\x80\x51\x69\x4e\x9f\x6b\xf3\xaf" \
        "\xd0\x06\x13\x70\xe5\x13\xfc\x3e\xdf\xc3\xb2\xbb\x7c\x40\xfa\xe3" \
        "\x2f\xaf\xe6\xcb\x9d\xf6\xc9\x3a\x33\x2a\xca\x73\x75\x2b\x2a\x4a" \
        "\x15\x06\x93\x3b\x74\xfa\x7d\x61\x88\xbc\x72\x54\xc5\xd3\x2d\xb0" \
        "\xa5\xd9\xa9\xb5\xc5\xf7\x05\xc7\x61\x93\x6b\x4b\x04\x54\x4c\x44" \
        "\x98\x07\x8a\x9b\xda\xcb\x00\xfa\x30\xb1\x35\x91\x37\x54\xf0\xdb" \
        "\x77\x82\x3f\xc4\xb1\xcd\xaa\x76\x4d\x93\x4f\xd4\xe6\x74\x4d\x17" \
        "\x11\xa2\xcd\xdf\x46\xbb\x56\x0f\x3a\x5a\xcd\x95\x1c\xd7\x12\x59" \
        "\x23\x21\x4a\x0e\x09\xe8\xac\xbc\x1a\x10\x09\x3c\x04\x97\x5a\xfd" \
        "\xe6\x2b\xcd\xe3\x9a\x97\x37\x67\x76\x19\xe8\x9c\xe2\x01\xa0\x42" \
        "\x7d\x97\x86\xc5\xb0\x87\xb8\x36\x04\x2a\x8d\x4c\x30\x89\xf4\x4d" \
        "\xc1\x14\xd3\xd4\x8f\xfd\x4e\x28\x9d\x33\x1b\x42\xd0\x58\x0b\x87" \
        "\x2e\x87\xd5\x06\x66\x72\xb2\xa9\x1f\x94\x91\x67\xd4\x63\x89\x53" \
        "\x57\x66\x6a\x88\x59\x42\x8b\x03\x87\xe7\x88\xa0\x8c\x51\xe2\x48" \
        "\xf3\xb7\xe0\xd3\x2e\x58\xd7\xbc\xc7\xe1\x1d\xfa\x4b\xa9\xe7\x7b" \
        "\xab\x0e\x1c\x48\x2f\x98\xf3\xb7\x5c\x44\xa0\xdf\xf0\xa3\xfd\x5f" \
        "\xd4\xd2\xc4\xfc\xe6\xd6\x15\xd4\x73\xb8\x63\x8c\x3b\x42\x30\xb4" \
        "\x21\x51\x61\x40\x97\x0f\xe4\xaf\x52\xd2\x09\xbf\x23\x1d\x0c\xcc" \
        "\xbb\xc2\x4b\x86\xc1\xca\x14\xee\x90\x6c\xa6\x5c\x96\x10\x73\x90" \
        "\x98\x63\xfd\x71\x3a\xaf\x1f\x60\x19\xec\xe4\xba\x6b\xf6\x0d\x89" \
        "\x12\x5d\xd9\xa8\xcb\x1a\x7a\x89\x45\xfb\xa4\xaf\x52\xb5\x0b\x9b" \
        "\xf4\x86\x04\xa3\xb5\xe7\xba\xe0\x19\x4a\xc6\x05\x78\xa7\x6d\xbd" \
        "\x86\xe1\x99\x76\x0b\x11\x31\x16\xa8\x7a\x01\x44\x2d\xbc\x58\xd5" \
        "\xc4\xc1\xd8\x9d\x49\x8a\xa5\xda\x78\x34\x3c\x81\x11\x31\xaa\x85" \
        "\x9f\xf8\xad\x3b\xe0\x29\x48\xf3\x80\x08\x48\x1e\xc3\x53\x02\x06" \
        "\xe2\x2c\x71\x96\xef\xca\x3b\xee\x0a\x64\xf6\x08\xeb\xbd\xc2\xf0" \
        "\xa9\xd4\x2e\x08\xd1\x57\x0d\x0b\xf7\x09\x22\x01\xa2\xb3\xa7\x78" \
        "\xe2\x06\x8e\x2e\xf3\x53\x32\x5b\x45\xb1\x0d\xc6\x61\xb8\x4c\x75" \
        "\x07\x9a\x8b\x58\x53\xca\xb0\x83\x8f\x43\xb7\x24\xed\xff\x51\x81" \
        "\xd0\x33\xa6\x9f\x73\x2b\xc4\x67\xa2\x60\x9c\xc1\xcb\xa1\x60\xf2" \
        "\x88\xc1\xe3\xc7\x9b\x05\x2f\x02\x0d\x2d\x6e\x0b\x31\xe4\x61\x68" \
        "\xa5\x87\x8e\x7c\x8b\xd7\x87\x8a\x3c\xf5\x90\x6e\x97\x5f\xa3\x50" \
        "\x30\xe9\xd2\x30\xb3\x6e\xda\x84\x40\x02\x46\x84\x2c\x09\x19\x72" \
        "\x0b\xa0\xce\x5e\x45\xad\xcd\x3e\x15\x3c\x34\xba\x8d\xc7\xfc\x3f" \
        "\xf3\xf7\x37\xae\x49\xd7\x1d\x9b\x30\x4a\xc1\x1f\x15\x07\xd2\xda" \
        "\xb8\x7b\xe3\x9a\xe7\xb5\xeb\xb2\x8b\xb6\x17\x1a\xab\x31\xce\xec" \
        "\xed\xe6\xab\xd5\x4c\xb6\x57\x88\xb0\x5d\x41\x09\x61\x34\x76\x47" \
        "\x7e\x93\xef\xc6\x01\x1b\x4b\x85\x0e\xe0\x92\xec\xd1\x1f\x13\xba" \
        "\x86\x6e\x67\xa2\xbb\xa1\xdd\x52\x42\x63\x45\x7d\x5f\xd2\xf9\x83" \
        "\x57\x1d\x85\xc4\xba\x39\x7d\xc7\x24\xd7\x2d\xd4\xa6\x81\xf2\x30" \
        "\x81\xef\xa0\x03\x02\x01\x17\xa2\x81\xe7\x04\x81\xe4\xdf\xff\xa1" \
        "\xce\x19\xe6\x14\x06\x47\x01\xc1\xb0\x57\x24\xa8\xce\x7f\xb7\x21" \
        "\xe5\x8e\x47\xa8\x8e\x8c\xca\xd9\x57\x0f\xf1\xf7\x09\x8f\x8c\x55" \
        "\x2d\xad\x62\x2e\xb0\xf5\x2f\xe4\xc4\x5e\xb5\x60\xde\x4f\xa7\x84" \
        "\xbc\x75\x02\xa6\x97\xfa\x68\x67\x1d\xed\xba\x4a\x49\x21\xf9\x93" \
        "\x5b\xd8\x8c\xce\xe2\x0a\x80\xc4\x0d\xc7\xc7\x2c\xdd\x4f\x74\x33" \
        "\xd5\xa7\x40\xf3\x5a\x07\x49\x40\x47\x1c\x30\xef\x82\xfd\x11\x28" \
        "\xa9\x13\xd4\x63\x48\xe3\x5b\xda\x15\xc9\x73\xb2\xc3\x25\xc9\x71" \
        "\x24\x06\x3d\x87\x5e\x46\xbb\xd6\xb1\x99\x18\x4b\x70\xbd\x3c\x0e" \
        "\xda\xba\x7a\x50\x52\x23\x75\x10\x93\x06\xce\xfb\x32\xc2\xbb\x35" \
        "\x48\xc3\xc3\xc2\xd9\x30\xe3\x40\xc6\xc7\x67\x90\x29\xdc\x5d\xcb" \
        "\x92\x58\x45\x04\x07\x0e\xba\xce\x8b\xa0\x7e\x62\x20\xbf\x2d\x5c" \
        "\xbd\xb9\xc8\x61\x25\x77\x80\x60\xd1\xd5\x29\x18\x92\x17\x41\x3a" \
        "\x3f\x42\xcb\xd1\x57\x25\x06\x8b\x2d\x74\x15\x63\x54\x7f\xa9\xb0" \
        "\x73\x2b\x40\x63\x06\x47\xbe\x03\xf6\x37\x97\xe9\x24\x23\xc0\x38" \
        "\x62"
        .b
    end

    it_behaves_like 'a model that produces the same binary data when to_der is called'

    describe '#parse' do
      it 'parses the data successfully' do
        expected = {
          TgsResponse: {
            pvno: 5,
            msg_type: 13,
            crealm: 'DEMO.LOCAL',
            cname: {
              name_type: 1,
              name_string: ['juan']
            },
            ticket: {
              tkt_vno: 5,
              realm: 'DEMO.LOCAL',
              sname: {
                name_type: 1,
                name_string: ['krbtgt', 'DEMO.LOCAL']
              },
              enc_part: {
                etype: 23,
                kvno: 2,
                cipher: "%=tG\xC7\x968\xB3\xC3\xADl\n5\x9D\xD3V\xF2&\x16i{+\xE3p\xE6e\xF2\x89]\x8E\x90\x00\x9E\xF7\xC7Tf\xAB\xDD\xD9\xF8\x1D\x96\xF9\x89\x7F;\x1F\x9F(\xA1\xEC\xEE\x05\xD3\x8E)\xD6\xCF\xF8{NP1:\xC0~\xCD\xCC\x1Ce\xE14\xB8<\xA1\xE0\x8D\v\x05\xBF\xE0B\x89\xF0\xCDX\tO\xA8\xB3\xEF\x94\x0F-\xA2\xCD\xDAr\xA9\x16\x1A\x9F\r\xE3\x9E\xCCZ:\xE5b\x05F\x87;\xB9N\xA5\xE8\xBF\b\x8ED\x91o\x83\xFE7P\xF5\xC5\x9C*g+\xE7v\xA8>\xBF@C]\xC4$=Y\x1Cb\xDF\baA\x06\xF6\xF0\xD1\xEB\xAA0#\xD4\xAA\xF3\x8C\xD5\x9F\x8BH\xCD\xD1\xBE5\xE2\x93;\xBC\xD8\xAAr\xF2\xEF\xB7\xA6\xEAZ\xCA\x80QiN\x9Fk\xF3\xAF\xD0\x06\x13p\xE5\x13\xFC>\xDF\xC3\xB2\xBB|@\xFA\xE3/\xAF\xE6\xCB\x9D\xF6\xC9:3*\xCAsu+*J\x15\x06\x93;t\xFA}a\x88\xBCrT\xC5\xD3-\xB0\xA5\xD9\xA9\xB5\xC5\xF7\x05\xC7a\x93kK\x04TLD\x98\a\x8A\x9B\xDA\xCB\x00\xFA0\xB15\x917T\xF0\xDBw\x82?\xC4\xB1\xCD\xAAvM\x93O\xD4\xE6tM\x17\x11\xA2\xCD\xDFF\xBBV\x0F:Z\xCD\x95\x1C\xD7\x12Y#!J\x0E\t\xE8\xAC\xBC\x1A\x10\t<\x04\x97Z\xFD\xE6+\xCD\xE3\x9A\x977gv\x19\xE8\x9C\xE2\x01\xA0B}\x97\x86\xC5\xB0\x87\xB86\x04*\x8DL0\x89\xF4M\xC1\x14\xD3\xD4\x8F\xFDN(\x9D3\eB\xD0X\v\x87.\x87\xD5\x06fr\xB2\xA9\x1F\x94\x91g\xD4c\x89SWfj\x88YB\x8B\x03\x87\xE7\x88\xA0\x8CQ\xE2H\xF3\xB7\xE0\xD3.X\xD7\xBC\xC7\xE1\x1D\xFAK\xA9\xE7{\xAB\x0E\x1CH/\x98\xF3\xB7\\D\xA0\xDF\xF0\xA3\xFD_\xD4\xD2\xC4\xFC\xE6\xD6\x15\xD4s\xB8c\x8C;B0\xB4!Qa@\x97\x0F\xE4\xAFR\xD2\t\xBF#\x1D\f\xCC\xBB\xC2K\x86\xC1\xCA\x14\xEE\x90l\xA6\\\x96\x10s\x90\x98c\xFDq:\xAF\x1F`\x19\xEC\xE4\xBAk\xF6\r\x89\x12]\xD9\xA8\xCB\x1Az\x89E\xFB\xA4\xAFR\xB5\v\x9B\xF4\x86\x04\xA3\xB5\xE7\xBA\xE0\x19J\xC6\x05x\xA7m\xBD\x86\xE1\x99v\v\x111\x16\xA8z\x01D-\xBCX\xD5\xC4\xC1\xD8\x9DI\x8A\xA5\xDAx4<\x81\x111\xAA\x85\x9F\xF8\xAD;\xE0)H\xF3\x80\bH\x1E\xC3S\x02\x06\xE2,q\x96\xEF\xCA;\xEE\nd\xF6\b\xEB\xBD\xC2\xF0\xA9\xD4.\b\xD1W\r\v\xF7\t\"\x01\xA2\xB3\xA7x\xE2\x06\x8E.\xF3S2[E\xB1\r\xC6a\xB8Lu\a\x9A\x8BXS\xCA\xB0\x83\x8FC\xB7$\xED\xFFQ\x81\xD03\xA6\x9Fs+\xC4g\xA2`\x9C\xC1\xCB\xA1`\xF2\x88\xC1\xE3\xC7\x9B\x05/\x02\r-n\v1\xE4ah\xA5\x87\x8E|\x8B\xD7\x87\x8A<\xF5\x90n\x97_\xA3P0\xE9\xD20\xB3n\xDA\x84@\x02F\x84,\t\x19r\v\xA0\xCE^E\xAD\xCD>\x15<4\xBA\x8D\xC7\xFC?\xF3\xF77\xAEI\xD7\x1D\x9B0J\xC1\x1F\x15\a\xD2\xDA\xB8{\xE3\x9A\xE7\xB5\xEB\xB2\x8B\xB6\x17\x1A\xAB1\xCE\xEC\xED\xE6\xAB\xD5L\xB6W\x88\xB0]A\ta4vG~\x93\xEF\xC6\x01\eK\x85\x0E\xE0\x92\xEC\xD1\x1F\x13\xBA\x86ng\xA2\xBB\xA1\xDDRBcE}_\xD2\xF9\x83W\x1D\x85\xC4\xBA9}\xC7$\xD7-\xD4".b
              }
            },
            enc_part: {
              etype: 23,
              cipher: "\xDF\xFF\xA1\xCE\x19\xE6\x14\x06G\x01\xC1\xB0W$\xA8\xCE\x7F\xB7!\xE5\x8EG\xA8\x8E\x8C\xCA\xD9W\x0F\xF1\xF7\t\x8F\x8CU-\xADb.\xB0\xF5/\xE4\xC4^\xB5`\xDEO\xA7\x84\xBCu\x02\xA6\x97\xFAhg\x1D\xED\xBAJI!\xF9\x93[\xD8\x8C\xCE\xE2\n\x80\xC4\r\xC7\xC7,\xDDOt3\xD5\xA7@\xF3Z\aI@G\x1C0\xEF\x82\xFD\x11(\xA9\x13\xD4cH\xE3[\xDA\x15\xC9s\xB2\xC3%\xC9q$\x06=\x87^F\xBB\xD6\xB1\x99\x18Kp\xBD<\x0E\xDA\xBAzPR#u\x10\x93\x06\xCE\xFB2\xC2\xBB5H\xC3\xC3\xC2\xD90\xE3@\xC6\xC7g\x90)\xDC]\xCB\x92XE\x04\a\x0E\xBA\xCE\x8B\xA0~b \xBF-\\\xBD\xB9\xC8a%w\x80`\xD1\xD5)\x18\x92\x17A:?B\xCB\xD1W%\x06\x8B-t\x15cT\x7F\xA9\xB0s+@c\x06G\xBE\x03\xF67\x97\xE9$#\xC08b".b
            }
          }
        }

        expect(described_class.parse(valid_data).to_h).to eq(expected)
      end
    end
  end

  describe Kerberos::LastReqItem do
    let(:valid_data) do
      "\x30\x18\xa0\x03\x02\x01\x00\xa1\x11\x18\x0f\x32\x30\x32\x32\x31" \
      "\x31\x30\x32\x31\x32\x30\x37\x32\x38\x5a"
        .b
    end

    it_behaves_like 'a model that produces the same binary data when to_der is called'

    describe '#parse' do
      it 'parses the data successfully' do
        expected = {
          LastReqItem: {
            lr_type: 0,
            lr_value: Time.parse('2022-11-02 12:07:28 UTC')
          }
        }

        expect(described_class.parse(valid_data).to_h).to eq(expected)
      end
    end
  end

  describe Kerberos::EncAsRepPart do
    let(:valid_data) do
      "\x79\x82\x01\x05\x30\x82\x01\x01\xa0\x1b\x30\x19\xa0\x03\x02\x01" \
      "\x17\xa1\x12\x04\x10\xca\x5a\x4a\x62\x9f\xe5\x72\xc3\xdb\xd3\xbe" \
      "\xac\x5e\xc6\x6a\xc7\xa1\x1c\x30\x1a\x30\x18\xa0\x03\x02\x01\x00" \
      "\xa1\x11\x18\x0f\x32\x30\x31\x34\x31\x32\x30\x39\x30\x31\x30\x39" \
      "\x30\x39\x5a\xa2\x06\x02\x04\x18\xf4\x10\x2c\xa3\x11\x18\x0f\x32" \
      "\x30\x31\x35\x30\x31\x30\x35\x31\x36\x30\x38\x32\x39\x5a\xa4\x07" \
      "\x03\x05\x00\x50\xe0\x00\x00\xa5\x11\x18\x0f\x32\x30\x31\x34\x31" \
      "\x32\x30\x39\x30\x31\x30\x39\x30\x39\x5a\xa6\x11\x18\x0f\x32\x30" \
      "\x31\x34\x31\x32\x30\x39\x30\x31\x30\x39\x30\x39\x5a\xa7\x11\x18" \
      "\x0f\x32\x30\x31\x34\x31\x32\x30\x39\x31\x31\x30\x39\x30\x39\x5a" \
      "\xa8\x11\x18\x0f\x32\x30\x31\x34\x31\x32\x31\x36\x30\x31\x30\x39" \
      "\x30\x39\x5a\xa9\x0c\x1b\x0a\x44\x45\x4d\x4f\x2e\x4c\x4f\x43\x41" \
      "\x4c\xaa\x1f\x30\x1d\xa0\x03\x02\x01\x01\xa1\x16\x30\x14\x1b\x06" \
      "\x6b\x72\x62\x74\x67\x74\x1b\x0a\x44\x45\x4d\x4f\x2e\x4c\x4f\x43" \
      "\x41\x4c\xab\x11\x30\x0f\x30\x0d\xa0\x03\x02\x01\x02\xa1\x06\x04" \
      "\x04\xc0\x00\x02\x02\xac\x12\x30\x10\x30\x0e\xa1\x04\x02\x02\x00" \
      "\xa5\xa2\x06\x04\x04\x1f\x00\x00\x00"
        .b
    end

    it_behaves_like 'a model that produces the same binary data when to_der is called'

    describe '#parse' do
      it 'parses the data successfully' do
        expected = {
          EncAsRepPart: {
            key: {
              keytype: 23,
              keyvalue: "\xCAZJb\x9F\xE5r\xC3\xDB\xD3\xBE\xAC^\xC6j\xC7".b
            },
            last_req: [
              {
                lr_type: 0,
                lr_value: Time.parse('2014-12-09T01:09:09+00:00')
              }
            ],
            nonce: 418648108,
            key_expiration: Time.parse('2015-01-05T16:08:29+00:00'),
            flags: "P\xE0\x00\x00".b,
            authtime: Time.parse('2014-12-09T01:09:09+00:00'),
            starttime: Time.parse('2014-12-09T01:09:09+00:00'),
            endtime: Time.parse('2014-12-09T11:09:09+00:00'),
            renew_till: Time.parse('2014-12-16T01:09:09+00:00'),
            srealm: 'DEMO.LOCAL',
            sname: {
              name_type: 1,
              name_string: ['krbtgt', 'DEMO.LOCAL']
            },
            caddr: [
              {
                addr_type: 2,
                address: "\xC0\x00\x02\x02".b
              }
            ],
            encrypted_pa_data: [
              {
                type: 165,
                value: "\x1F\x00\x00\x00"
              }
            ]
          }
        }

        expect(described_class.parse(valid_data).to_h).to eq(expected)
      end
    end
  end

  describe Kerberos::EncTgsRepPart do
    let(:valid_data) do
      "\x7a\x81\xf7\x30\x81\xf4\xa0\x1b\x30\x19\xa0\x03\x02\x01\x17\xa1" \
      "\x12\x04\x10\x0a\xc1\xc6\x21\xd0\xa5\x28\x89\x68\xed\x73\x85\xbf" \
      "\x9e\x0d\xbd\xa1\x1c\x30\x1a\x30\x18\xa0\x03\x02\x01\x00\xa1\x11" \
      "\x18\x0f\x32\x30\x32\x32\x31\x31\x30\x34\x31\x38\x33\x30\x34\x30" \
      "\x5a\xa2\x06\x02\x04\x03\xe3\x26\xba\xa4\x07\x03\x05\x00\x40\xa5" \
      "\x00\x00\xa5\x11\x18\x0f\x32\x30\x32\x32\x31\x31\x30\x34\x31\x38" \
      "\x33\x30\x34\x30\x5a\xa6\x11\x18\x0f\x32\x30\x32\x32\x31\x31\x30" \
      "\x34\x31\x38\x33\x30\x34\x30\x5a\xa7\x11\x18\x0f\x32\x30\x32\x32" \
      "\x31\x31\x30\x35\x30\x34\x33\x30\x34\x30\x5a\xa8\x11\x18\x0f\x32" \
      "\x30\x32\x32\x31\x31\x30\x35\x31\x38\x33\x30\x34\x30\x5a\xa9\x0c" \
      "\x1b\x0a\x41\x44\x46\x33\x2e\x4c\x4f\x43\x41\x4c\xaa\x21\x30\x1f" \
      "\xa0\x03\x02\x01\x02\xa1\x18\x30\x16\x1b\x04\x63\x69\x66\x73\x1b" \
      "\x0e\x64\x63\x33\x2e\x61\x64\x66\x33\x2e\x6c\x6f\x63\x61\x6c\xac" \
      "\x29\x30\x27\x30\x0e\xa1\x04\x02\x02\x00\xa5\xa2\x06\x04\x04\x1f" \
      "\x00\x00\x00\x30\x15\xa1\x04\x02\x02\x00\xa7\xa2\x0d\x04\x0b\x30" \
      "\x09\xa0\x07\x03\x05\x00\x10\x00\x00\x00"
        .b
    end

    it_behaves_like 'a model that produces the same binary data when to_der is called'

    describe '#parse' do
      it 'parses the data successfully' do
        expected = {
          EncTgsRepPart: {
            key: {
              keytype: 23,
              keyvalue: "\n\xC1\xC6!\xD0\xA5(\x89h\xEDs\x85\xBF\x9E\r\xBD".b
            },
            last_req: [
              {
                lr_type: 0,
                lr_value: Time.parse('2022-11-04T18:30:40+00:00')
              }
            ],
            nonce: 65218234,
            flags: "@\xA5\x00\x00".b,
            authtime: Time.parse('2022-11-04T18:30:40+00:00'),
            starttime: Time.parse('2022-11-04T18:30:40+00:00'),
            endtime: Time.parse('2022-11-05T04:30:40+00:00'),
            renew_till: Time.parse('2022-11-05T18:30:40+00:00'),
            srealm: 'ADF3.LOCAL',
            sname: {
              name_type: 2,
              name_string: ['cifs', 'dc3.adf3.local']
            },
            caddr: [],
            encrypted_pa_data: [
              { type: 165, value: "\x1F\x00\x00\x00".b },
              { type: 167, value: "0\t\xA0\a\x03\x05\x00\x10\x00\x00\x00".b }
            ]
          }
        }

        expect(described_class.parse(valid_data).to_h).to eq(expected)
      end
    end
  end

  describe Kerberos::ApReq do
    let(:valid_data) do
      "\x6e\x82\x01\xd2\x30\x82\x01\xce\xa0\x03\x02\x01\x05\xa1\x03\x02\x01\x0e\xa2\x07" \
      "\x03\x05\x00\x00\x00\x00\x00\xa3\x82\x01\x10\x61\x82\x01\x0c\x30\x82\x01\x08\xa0" \
      "\x03\x02\x01\x05\xa1\x0c\x1b\x0a\x44\x45\x4d\x4f\x2e\x4c\x4f\x43\x41\x4c\xa2\x1f" \
      "\x30\x1d\xa0\x03\x02\x01\x01\xa1\x16\x30\x14\x1b\x06\x6b\x72\x62\x74\x67\x74\x1b" \
      "\x0a\x44\x45\x4d\x4f\x2e\x4c\x4f\x43\x41\x4c\xa3\x81\xd1\x30\x81\xce\xa0\x03\x02" \
      "\x01\x17\xa1\x03\x02\x01\x02\xa2\x81\xc1\x04\x81\xbe\x81\x4f\x84\xf4\x21\x93\xe5" \
      "\x4a\xcc\x25\x89\x53\xb3\xee\x47\xf1\x33\xdd\x15\xdc\x66\x05\x90\xe7\x67\x90\x1d" \
      "\xbe\x03\xaa\x46\x02\xd0\x26\x4d\x1b\xbb\x1f\x09\xd4\xdc\x45\xbb\xa0\x7c\xd0\xf2" \
      "\x43\x9f\xab\x79\x4c\x8f\x36\x9e\x0c\x58\x61\xc7\xad\x60\xb2\x44\x31\xfe\x89\x40" \
      "\x25\xfb\x8b\x71\x69\x22\x87\xab\x6e\x51\x8e\x3a\xed\x64\x16\x3a\x7f\x4d\xb6\xa1" \
      "\xc8\x69\xd0\x12\x5f\x01\xd8\x21\x38\x29\xe2\x97\x63\x5a\x4d\xbf\xc9\xd7\xe9\xc4" \
      "\x07\x28\x89\xdd\xc1\x61\xba\xcc\x12\x72\x28\x1b\x70\x3d\x1f\xae\x50\xd5\x88\x5b" \
      "\xca\x00\x55\xd8\xe9\xdd\x1c\x91\x7e\x65\x99\x4d\x97\x6c\xb8\xc5\x89\xe1\xaf\x4c" \
      "\xe4\xb6\x3a\x79\x5c\xce\xf4\xa9\x33\x79\x5f\x69\xb9\x16\xba\x12\x03\x29\xb1\x80" \
      "\x89\x21\x1a\x93\xcd\xe7\x3a\xba\xca\x57\x94\x47\x3a\x69\x1a\x1a\x9d\x1d\x2a\x1d" \
      "\x36\x82\xfe\xa4\x81\xa4\x30\x81\xa1\xa0\x03\x02\x01\x17\xa2\x81\x99\x04\x81\x96" \
      "\x2b\xea\x95\x7c\x26\x13\x06\x25\x21\x8d\xf7\xcd\x0f\x5b\xac\xc8\x4f\x35\xdb\xad" \
      "\x13\xc9\xfb\xf7\x0f\x0a\x20\xcd\x7c\xb7\xc0\xd1\x8c\xb6\x8d\x0f\x81\x88\xce\xc2" \
      "\xf1\xcb\xe3\xc1\x02\x3d\x09\x7e\x4d\xb8\x3f\x0e\x8b\x28\x78\x90\x77\x68\x81\xe3" \
      "\xc4\x88\x7a\x84\xe8\x06\x82\x9d\xb9\x35\xba\xc1\x20\x8c\x7a\x93\xfe\xd1\x16\xe5" \
      "\xc5\x34\x7e\x49\xc5\x9b\x80\x5a\x52\x37\xce\x56\x4f\x9d\x47\x38\xe9\x72\xb2\x37" \
      "\x01\x0f\xdf\x90\x8f\x14\xca\xce\x94\x10\xd9\x0e\x86\x08\xe9\xa3\x3d\x16\x6a\x8a" \
      "\x51\x00\x6a\x30\x7a\x3d\x4e\x65\x6e\x82\xa1\xe6\x59\xd4\xbb\x95\x5c\xbc\xc8\x36" \
      "\xe1\x95\xca\x7e\x41\x3c\x66\xc4\xdc\x41"
        .b
    end

    it_behaves_like 'a model that produces the same binary data when to_der is called'

    describe '#parse' do
      it 'parses the data successfully' do
        expected = {
          ApReq: {
            pvno: 5,
            msg_type: 14,
            ap_options: "\x00\x00\x00\x00".b,
            ticket: {
              tkt_vno: 5,
              realm: 'DEMO.LOCAL',
              sname: {
                name_type: 1,
                name_string: ['krbtgt', 'DEMO.LOCAL']
              },
              enc_part: {
                etype: 23,
                kvno: 2,
                cipher: "\x81O\x84\xF4!\x93\xE5J\xCC%\x89S\xB3\xEEG\xF13\xDD\x15\xDCf\x05\x90\xE7g\x90\x1D\xBE\x03\xAAF\x02\xD0&M\e\xBB\x1F\t\xD4\xDCE\xBB\xA0|\xD0\xF2C\x9F\xAByL\x8F6\x9E\fXa\xC7\xAD`\xB2D1\xFE\x89@%\xFB\x8Bqi\"\x87\xABnQ\x8E:\xEDd\x16:\x7FM\xB6\xA1\xC8i\xD0\x12_\x01\xD8!8)\xE2\x97cZM\xBF\xC9\xD7\xE9\xC4\a(\x89\xDD\xC1a\xBA\xCC\x12r(\ep=\x1F\xAEP\xD5\x88[\xCA\x00U\xD8\xE9\xDD\x1C\x91~e\x99M\x97l\xB8\xC5\x89\xE1\xAFL\xE4\xB6:y\\\xCE\xF4\xA93y_i\xB9\x16\xBA\x12\x03)\xB1\x80\x89!\x1A\x93\xCD\xE7:\xBA\xCAW\x94G:i\x1A\x1A\x9D\x1D*\x1D6\x82\xFE".b
              }
            },
            authenticator: {
              etype: 23,
              cipher: "+\xEA\x95|&\x13\x06%!\x8D\xF7\xCD\x0F[\xAC\xC8O5\xDB\xAD\x13\xC9\xFB\xF7\x0F\n \xCD|\xB7\xC0\xD1\x8C\xB6\x8D\x0F\x81\x88\xCE\xC2\xF1\xCB\xE3\xC1\x02=\t~M\xB8?\x0E\x8B(x\x90wh\x81\xE3\xC4\x88z\x84\xE8\x06\x82\x9D\xB95\xBA\xC1 \x8Cz\x93\xFE\xD1\x16\xE5\xC54~I\xC5\x9B\x80ZR7\xCEVO\x9DG8\xE9r\xB27\x01\x0F\xDF\x90\x8F\x14\xCA\xCE\x94\x10\xD9\x0E\x86\b\xE9\xA3=\x16j\x8AQ\x00j0z=Nen\x82\xA1\xE6Y\xD4\xBB\x95\\\xBC\xC86\xE1\x95\xCA~A<f\xC4\xDCA".b
            }
          }
        }

        expect(described_class.parse(valid_data).to_h).to eq(expected)
      end
    end
  end

  describe Kerberos::Authenticator do
    let(:valid_data) do
      "\x62\x7c\x30\x7a\xa0\x03\x02\x01\x05\xa1\x0c\x1b\x0a\x44\x45\x4d\x4f\x2e\x4c\x4f" \
      "\x43\x41\x4c\xa2\x11\x30\x0f\xa0\x03\x02\x01\x01\xa1\x08\x30\x06\x1b\x04\x6a\x75" \
      "\x61\x6e\xa3\x1b\x30\x19\xa0\x03\x02\x01\x07\xa1\x12\x04\x10\x9e\xf0\x84\xd6\x81" \
      "\xe5\x16\x02\x32\xb1\xc3\x4e\xad\x83\x1d\x43\xa4\x05\x02\x03\x0a\xf8\x98\xa5\x11" \
      "\x18\x0f\x32\x30\x31\x34\x31\x32\x31\x36\x32\x32\x35\x30\x34\x36\x5a\xa6\x1b\x30" \
      "\x19\xa0\x03\x02\x01\x17\xa1\x12\x04\x10\x7d\x63\xdd\x79\x73\x67\xce\x86\xbb\x5f" \
      "\x2b\x8a\xba\x58\xfd\x6e"
        .b
    end

    it_behaves_like 'a model that produces the same binary data when to_der is called'

    describe '#parse' do
      it 'parses the data successfully' do
        expected = {
          Authenticator: {
            vno: 5,
            crealm: 'DEMO.LOCAL',
            cname: {
              name_type: 1,
              name_string: ['juan']
            },
            cksum: {
              cksumtype: 7,
              checksum: "\x9E\xF0\x84\xD6\x81\xE5\x16\x022\xB1\xC3N\xAD\x83\x1DC".b
            },
            cusec: 719000,
            ctime: Time.parse('2014-12-16T22:50:46+00:00'),
            subkey: {
              keytype: 23,
              keyvalue: "}c\xDDysg\xCE\x86\xBB_+\x8A\xBAX\xFDn".b
            },
            authorization_data: []
          }
        }

        expect(described_class.parse(valid_data).to_h).to eq(expected)
      end
    end
  end

  describe Kerberos::ApRep do
    let(:valid_data) do
      "\x6f\x81\x89\x30\x81\x86\xa0\x03\x02\x01\x05\xa1\x03\x02\x01\x0f" \
      "\xa2\x7a\x30\x78\xa0\x03\x02\x01\x12\xa2\x71\x04\x6f\x3e\xe5\xcd" \
      "\x5d\xa9\x39\xec\x75\x9d\xef\xa9\xf8\x31\x55\x19\xea\x45\xd4\x22" \
      "\x13\xd1\x21\x1e\x75\xbb\x5d\xab\x39\x62\xee\x3e\x6b\xcc\x48\xcc" \
      "\x3c\xe2\x7f\x6b\xf5\x1d\x56\x90\x06\x5b\x21\xc9\x1f\x85\xaa\x89" \
      "\x55\xf1\xb4\x15\x8c\xc2\xf8\x2f\x7e\xf7\x08\x04\x5c\x2a\xc4\x4e" \
      "\x8c\xcb\x4e\xfa\x65\x20\xc7\x44\x19\x01\xb5\x70\xaa\x00\xab\xdf" \
      "\xcb\x33\xa8\x59\x0a\x93\xdd\x5e\x02\xd7\xc3\x2d\x8e\xe2\x2c\xc1" \
      "\xd2\x78\x38\x5c\x90\x62\x35\xfd\x88\x67\xeb\x10"
        .b
    end

    it_behaves_like 'a model that produces the same binary data when to_der is called'

    describe '#parse' do
      it 'parses the data successfully' do
        expected = {
          ApRep: {
            pvno: 5,
            msg_type: 15,
            enc_part: {
              etype: 18,
              cipher: ">\xE5\xCD]\xA99\xECu\x9D\xEF\xA9\xF81U\x19\xEAE\xD4\"\x13\xD1!\x1Eu\xBB]\xAB9b\xEE>k\xCCH\xCC<\xE2\x7Fk\xF5\x1DV\x90\x06[!\xC9\x1F\x85\xAA\x89U\xF1\xB4\x15\x8C\xC2\xF8/~\xF7\b\x04\\*\xC4N\x8C\xCBN\xFAe \xC7D\x19\x01\xB5p\xAA\x00\xAB\xDF\xCB3\xA8Y\n\x93\xDD^\x02\xD7\xC3-\x8E\xE2,\xC1\xD2x8\\\x90b5\xFD\x88g\xEB\x10".b
            }
          }
        }

        expect(described_class.parse(valid_data).to_h).to eq(expected)
      end
    end
  end

  describe Kerberos::EncApRepPart do
    let(:valid_data) do
      "\x7b\x51\x30\x4f\xa0\x11\x18\x0f\x32\x30\x32\x32\x31\x31\x30\x32" \
      "\x32\x32\x35\x36\x30\x34\x5a\xa1\x05\x02\x03\x0d\x2d\xf2\xa2\x2b" \
      "\x30\x29\xa0\x03\x02\x01\x12\xa1\x22\x04\x20\xa5\x78\x04\xfc\x0c" \
      "\xde\xbe\x21\xb6\x43\x53\x6e\x87\x7e\xbd\xc7\x89\xaa\x62\x94\x90" \
      "\xaf\x47\x1d\x5c\xf7\x24\x9e\x27\xf2\x77\x8c\xa3\x06\x02\x04\x48" \
      "\xaf\x3c\x08"
        .b
    end

    it_behaves_like 'a model that produces the same binary data when to_der is called'

    describe '#parse' do
      it 'parses the data successfully' do
        expected = {
          EncApRepPart: {
            ctime: Time.parse('2022-11-02T22:56:04+00:00'),
            cusec: 863730,
            subkey: {
              keytype: 18,
              keyvalue: "\xA5x\x04\xFC\f\xDE\xBE!\xB6CSn\x87~\xBD\xC7\x89\xAAb\x94\x90\xAFG\x1D\\\xF7$\x9E'\xF2w\x8C".b
            },
            seq_number: 1219443720
          }
        }

        expect(described_class.parse(valid_data).to_h).to eq(expected)
      end
    end
  end

  describe Kerberos::AsReq do
    let(:valid_data) do
      "\x6a\x82\x01\x08\x30\x82\x01\x04\xa1\x03\x02\x01" \
       "\x05\xa2\x03\x02\x01\x0a\xa3\x5f\x30\x5d\x30\x48\xa1\x03\x02\x01" \
       "\x02\xa2\x41\x04\x3f\x30\x3d\xa0\x03\x02\x01\x17\xa2\x36\x04\x34" \
       "\x60\xae\x53\xa5\x0b\x56\x2e\x46\x61\xd9\xd6\x89\x98\xfc\x79\x9d" \
       "\x45\x73\x7d\x0d\x8a\x78\x84\x4d\xd7\x7c\xc6\x50\x08\x8d\xab\x22" \
       "\x79\xc3\x8d\xd3\xaf\x9f\x5e\xb7\xb8\x9b\x57\xc5\xc9\xc5\xea\x90" \
       "\x89\xc3\x63\x58\x30\x11\xa1\x04\x02\x02\x00\x80\xa2\x09\x04\x07" \
       "\x30\x05\xa0\x03\x01\x01\x00\xa4\x81\x96\x30\x81\x93\xa0\x07\x03" \
       "\x05\x00\x50\x80\x00\x00\xa1\x11\x30\x0f\xa0\x03\x02\x01\x01\xa1" \
       "\x08\x30\x06\x1b\x04\x6a\x75\x61\x6e\xa2\x0c\x1b\x0a\x44\x45\x4d" \
       "\x4f\x2e\x4c\x4f\x43\x41\x4c\xa3\x1f\x30\x1d\xa0\x03\x02\x01\x01" \
       "\xa1\x16\x30\x14\x1b\x06\x6b\x72\x62\x74\x67\x74\x1b\x0a\x44\x45" \
       "\x4d\x4f\x2e\x4c\x4f\x43\x41\x4c\xa4\x11\x18\x0f\x31\x39\x37\x30" \
       "\x30\x31\x30\x31\x30\x30\x30\x30\x30\x30\x5a\xa5\x11\x18\x0f\x31" \
       "\x39\x37\x30\x30\x31\x30\x31\x30\x30\x30\x30\x30\x30\x5a\xa6\x11" \
       "\x18\x0f\x31\x39\x37\x30\x30\x31\x30\x31\x30\x30\x30\x30\x30\x30" \
       "\x5a\xa7\x06\x02\x04\x18\xf4\x10\x2c\xa8\x05\x30\x03\x02\x01\x17"
        .b
    end

    it_behaves_like 'a model that produces the same binary data when to_der is called'

    describe '#parse' do
      it 'parses the data successfully' do
        expected = {
          AsReq: {
            pvno: 5,
            msg_type: 10,
            pa_data: [
              {
                type: 2,
                value: "0=\xA0\x03\x02\x01\x17\xA26\x044`\xAES\xA5\vV.Fa\xD9\xD6\x89\x98\xFCy\x9DEs}\r\x8Ax\x84M\xD7|\xC6P\b\x8D\xAB\"y\xC3\x8D\xD3\xAF\x9F^\xB7\xB8\x9BW\xC5\xC9\xC5\xEA\x90\x89\xC3cX".b
              },
              {
                type: 128,
                value: "0\x05\xA0\x03\x01\x01\x00".b
              }
            ],
            req_body: {
              kdc_options: "P\x80\x00\x00".b,
              cname: { name_type: 1, name_string: ['juan'] },
              realm: 'DEMO.LOCAL',
              sname: { name_type: 1, name_string: ['krbtgt', 'DEMO.LOCAL'] },
              from: Time.parse('1970-01-01T00:00:00+00:00'),
              till: Time.parse('1970-01-01T00:00:00+00:00'),
              rtime: Time.parse('1970-01-01T00:00:00+00:00'),
              nonce: 418648108,
              etype: [23],
              addresses: [],
              enc_authorization_data: {
                etype: nil,
                cipher: nil
              }
            }
          }
        }

        expect(described_class.parse(valid_data).to_h).to eq(expected)
      end
    end
  end

  describe Kerberos::TgsReq do
    let(:valid_data) do
      "\x6c\x82\x05\x30\x30\x82\x05\x2c\xa1\x03\x02\x01" \
        "\x05\xa2\x03\x02\x01\x0c\xa3\x82\x01\xfe\x30\x82\x01\xfa\x30\x82" \
        "\x01\xe3\xa1\x03\x02\x01\x01\xa2\x82\x01\xda\x04\x82\x01\xd6\x6e" \
        "\x82\x01\xd2\x30\x82\x01\xce\xa0\x03\x02\x01\x05\xa1\x03\x02\x01" \
        "\x0e\xa2\x07\x03\x05\x00\x00\x00\x00\x00\xa3\x82\x01\x10\x61\x82" \
        "\x01\x0c\x30\x82\x01\x08\xa0\x03\x02\x01\x05\xa1\x0c\x1b\x0a\x44" \
        "\x45\x4d\x4f\x2e\x4c\x4f\x43\x41\x4c\xa2\x1f\x30\x1d\xa0\x03\x02" \
        "\x01\x01\xa1\x16\x30\x14\x1b\x06\x6b\x72\x62\x74\x67\x74\x1b\x0a" \
        "\x44\x45\x4d\x4f\x2e\x4c\x4f\x43\x41\x4c\xa3\x81\xd1\x30\x81\xce" \
        "\xa0\x03\x02\x01\x17\xa1\x03\x02\x01\x02\xa2\x81\xc1\x04\x81\xbe" \
        "\x55\xe7\x45\xc3\x6f\xa2\x28\x47\xab\x9c\x86\x13\xeb\x1d\xa8\x98" \
        "\xec\x67\x1c\x1f\x15\x46\x6b\xe0\x4a\xf2\x4d\x3d\xf7\xe4\x31\x7a" \
        "\x4f\x15\x2f\x60\xdd\x98\xa8\xe1\x97\x6b\x6f\xc1\x24\x46\x6c\xa9" \
        "\x1e\xe2\x36\x27\xe3\xfa\x99\x0c\x9b\x77\x0c\xe2\x58\x02\x68\xc4" \
        "\x54\x2a\x2c\x5d\x6c\x4b\xc8\xbc\x04\x8f\x0a\x44\x27\x78\xdc\x4b" \
        "\x3e\x01\xbe\xac\xf7\x8e\x7a\x50\xc6\x3e\x77\xd9\x65\x24\xd5\x1a" \
        "\x18\xa1\x84\x71\x85\x98\x2f\x54\x8b\x56\xe3\xfb\x2c\xe2\x30\x84" \
        "\x06\x55\x55\xea\x31\x8b\x84\x00\xe3\x1a\xc3\xa8\xc2\xac\xc0\x78" \
        "\x3f\x47\x68\x74\xcc\x62\xa6\xcf\xf4\x6b\xae\xaf\x27\xde\x1a\x4d" \
        "\xb7\xa8\x9f\x76\x7a\x79\x2a\x42\x12\x7b\xd2\xbe\xc9\x98\x7c\x44" \
        "\x38\x40\xbd\x49\xcd\x3e\xdc\x65\xc7\x8b\x44\xf5\xa5\xd4\x66\x0e" \
        "\xfd\x58\x9d\x31\x39\x27\xd7\xfc\x81\x07\xa3\x2a\x1c\x3c\xa4\x81" \
        "\xa4\x30\x81\xa1\xa0\x03\x02\x01\x17\xa2\x81\x99\x04\x81\x96\x6d" \
        "\xb5\xea\x35\x51\x26\x94\xf5\x31\x27\xd1\x00\x59\xed\x6c\xbc\x20" \
        "\x2c\x89\x70\x7a\x14\x74\xc9\x05\x85\x07\xf7\x36\x53\xcd\x80\x6a" \
        "\xa1\x62\xe6\x73\x3a\x7d\x71\x83\x1d\x93\xc6\x74\xc5\x6f\x7b\x71" \
        "\x1d\xce\xd3\x0b\x46\x8b\xc1\x13\x56\xe7\xee\x8c\xa2\xcc\xa6\x78" \
        "\xde\x7e\x80\x23\x39\x67\xd8\x2c\x3a\x6a\x12\x3e\x20\xc5\xaa\xd0" \
        "\xae\xd5\x5e\xb6\x7c\x83\x66\xfc\xc5\x65\x1e\xea\x62\x97\x48\x68" \
        "\xda\x8e\x62\x7c\x06\x35\x7d\xc5\x33\x25\xbc\x93\x8a\x64\x16\x2d" \
        "\xf4\xde\x7c\x56\xd0\x3b\x13\x4f\x2f\x86\x75\x14\x60\x80\x4d\x77" \
        "\xeb\x04\x08\xe6\x41\x20\xee\x16\x0f\xe2\x2b\x76\xd5\x14\x60\x2d" \
        "\xf6\xa8\xde\xf2\xb5\x30\x11\xa1\x04\x02\x02\x00\x80\xa2\x09\x04" \
        "\x07\x30\x05\xa0\x03\x01\x01\x00\xa4\x82\x03\x1c\x30\x82\x03\x18" \
        "\xa0\x07\x03\x05\x00\x50\x80\x00\x00\xa2\x0c\x1b\x0a\x44\x45\x4d" \
        "\x4f\x2e\x4c\x4f\x43\x41\x4c\xa3\x1f\x30\x1d\xa0\x03\x02\x01\x01" \
        "\xa1\x16\x30\x14\x1b\x06\x6b\x72\x62\x74\x67\x74\x1b\x0a\x44\x45" \
        "\x4d\x4f\x2e\x4c\x4f\x43\x41\x4c\xa4\x11\x18\x0f\x31\x39\x37\x30" \
        "\x30\x31\x30\x31\x30\x30\x30\x30\x30\x30\x5a\xa5\x11\x18\x0f\x31" \
        "\x39\x37\x30\x30\x31\x30\x31\x30\x30\x30\x30\x30\x30\x5a\xa6\x11" \
        "\x18\x0f\x31\x39\x37\x30\x30\x31\x30\x31\x30\x30\x30\x30\x30\x30" \
        "\x5a\xa7\x06\x02\x04\x7a\x5f\xfa\xac\xa8\x05\x30\x03\x02\x01\x17" \
        "\xaa\x82\x02\x94\x30\x82\x02\x90\xa0\x03\x02\x01\x17\xa2\x82\x02" \
        "\x87\x04\x82\x02\x83\x8a\x30\x9d\x7c\xa7\xe4\x22\x36\x0d\x44\xf5" \
        "\xd1\x3a\x00\x8b\x37\x6e\x52\x20\xbc\xea\x8b\x70\x66\xc0\x90\xc4" \
        "\x28\x27\x31\xcf\x16\x2c\x7c\x20\x7c\xaa\x3c\xe0\xc7\x6a\xfb\xb9" \
        "\x41\xb2\xd9\xa2\xd8\x59\x92\xb5\x82\x17\x8a\x93\x56\x51\x97\xf9" \
        "\xad\x1d\xc6\xc6\xbc\xa0\x44\x9b\xc5\xc1\xd8\x31\xf1\x94\x88\x37" \
        "\x0b\xa5\xaf\x51\xb0\x3d\x9a\x6d\xc0\xb2\xf1\x20\x33\xb7\x87\x7a" \
        "\xcf\xf7\xde\xa0\x8b\x83\xae\x76\x71\x38\x7d\x42\x4d\xde\x0a\x03" \
        "\xbe\xb7\x1c\xf4\x8c\x84\x16\x35\x2e\x60\xc4\x83\x17\x71\xe7\x00" \
        "\x23\xfb\xa1\x01\xd3\xda\xe0\x7f\xcd\x04\x3d\x53\x85\x4e\x72\x09" \
        "\x63\xf4\x06\xd8\x51\x15\xab\x15\xec\x4f\x80\xc5\xf3\xe2\x8a\x7f" \
        "\x97\x0f\x71\xed\x0c\xe9\x9f\x19\x14\x6b\x3d\x94\x4a\xae\x3e\xb8" \
        "\x1a\x33\xc4\x56\xcf\x36\xf8\x56\x0a\xe9\xaf\x5c\xb5\x42\x40\x72" \
        "\xde\xd5\x95\x37\xa0\xe5\x93\xc3\x32\xef\x82\x0a\x0f\x1e\x0a\x75" \
        "\x20\xb6\x8d\xfc\xe2\xce\xb3\x87\xdf\xa5\x04\x67\xf4\x30\x1a\x0a" \
        "\x19\x38\x46\x5a\x58\x46\xf4\x34\xba\xdb\x46\x4e\xc4\xcc\xaa\xbc" \
        "\x24\x85\xa5\x24\x84\x96\xa4\x75\x43\x46\x7f\x11\xce\x47\x9f\xfa" \
        "\x84\xce\xb6\x35\xcd\x95\x1e\x1d\x03\x88\x1d\xe3\x3a\x53\x9b\xa5" \
        "\x1b\x97\x83\xcf\xb3\x9e\x88\x08\x86\x6d\x48\x98\xec\x8d\x83\x42" \
        "\xae\xc9\x92\x56\xd5\xa9\x90\x03\x47\xb8\xd7\x81\xf4\x6e\x1e\x6d" \
        "\x73\x8a\x3a\xc6\x0f\xb1\x38\x99\x4f\x06\x04\x11\x7d\xa3\x39\x34" \
        "\xa9\x9e\x8e\x48\xcc\x64\xf3\x33\x3c\x0b\x88\x3e\x42\xf8\x74\x3e" \
        "\x92\x68\x67\x26\xeb\x46\xaa\xc8\x31\x77\x4b\xb1\x57\xef\x49\xd3" \
        "\x98\xf5\x53\xc0\x58\x19\x26\xb7\x1b\x8c\x17\x77\xbc\xe0\x20\xe9" \
        "\x80\x08\xe5\x92\x27\x72\x53\x20\x09\xc6\x39\x02\x97\x4b\x0a\x54" \
        "\x8c\x2d\x0c\xbd\x65\x9c\x61\x54\xef\x90\x6d\xc6\x56\x62\xc8\x04" \
        "\xd7\x6b\x23\xd1\xb0\xc7\xe7\xe5\x36\x96\x05\xf9\x46\x01\xc1\xac" \
        "\x0c\x96\x84\xaa\x6c\x84\x58\xde\xad\xe7\x32\x85\x2c\xfd\x27\x1a" \
        "\xdc\x39\x60\xbc\x5e\x0d\x7e\x1d\x65\x7f\x21\xfa\xcd\xc3\x30\xb3" \
        "\xee\x00\xc9\xf8\x1e\x0f\xb5\x67\x87\xa0\xaf\x46\xe3\x55\xff\x0c" \
        "\x0c\x63\x8e\xdb\xd9\x11\x9c\x17\x5a\x87\xb0\xf2\x51\x56\x62\x7f" \
        "\x7e\x64\x53\xaf\x04\x77\xfb\xec\xa7\x96\x98\x93\x96\x10\x39\x72" \
        "\xf0\x44\xfa\x66\x7f\x00\xe0\xe9\x9f\x36\xbc\x81\x87\x2e\xfb\x6d" \
        "\xc0\x9b\x52\xb2\x19\xa5\xbf\x8c\x0f\x33\x19\x0b\x41\xce\xf5\x6f" \
        "\x6f\xd7\x2b\x04\xe0\xa7\xad\x40\x32\x8d\xf3\xbe\x13\xc7\xc6\x21" \
        "\xed\x23\x10\xc5\x1a\x9f\x82\x99\x62\x37\x71\xe4\xb8\x69\x0a\xa8" \
        "\x88\xeb\xcb\xc0\x1c\xdf\x54\x6f\x4c\x43\x90\x12\xcf\x29\xb0\xf1" \
        "\xc9\xfd\x4b\x5e\x44\x08\x25\x8d\x64\x45\x3e\xbc\x7e\xb1\x67\x80" \
        "\xc3\x39\x1e\xe8\xbf\xe0\x90\x70\xf8\x00\xcf\x18\x29\xab\x72\x01" \
        "\x0c\x43\x02\x0b\x81\x7b\x1a\xac\xf5\x25\x33\x53\x86\xf5\x25\xef" \
        "\x7f\x1d\x1d\x05\x3f\x12\x38\x4a\x3f\x98\x03\xc8\x9f\xf3\x9b\x87" \
        "\x80\xb2\x4f\xcd\x3d\x3d\x58\xb5"
        .b
    end

    it_behaves_like 'a model that produces the same binary data when to_der is called'

    describe '#parse' do
      it 'parses the data successfully' do
        expected = {
          TgsReq: {
            pvno: 5,
            msg_type: 12,
            pa_data: [
              {
                type: 1,
                value: "n\x82\x01\xD20\x82\x01\xCE\xA0\x03\x02\x01\x05\xA1\x03\x02\x01\x0E\xA2\a\x03\x05\x00\x00\x00\x00\x00\xA3\x82\x01\x10a\x82\x01\f0\x82\x01\b\xA0\x03\x02\x01\x05\xA1\f\e\nDEMO.LOCAL\xA2\x1F0\x1D\xA0\x03\x02\x01\x01\xA1\x160\x14\e\x06krbtgt\e\nDEMO.LOCAL\xA3\x81\xD10\x81\xCE\xA0\x03\x02\x01\x17\xA1\x03\x02\x01\x02\xA2\x81\xC1\x04\x81\xBEU\xE7E\xC3o\xA2(G\xAB\x9C\x86\x13\xEB\x1D\xA8\x98\xECg\x1C\x1F\x15Fk\xE0J\xF2M=\xF7\xE41zO\x15/`\xDD\x98\xA8\xE1\x97ko\xC1$Fl\xA9\x1E\xE26'\xE3\xFA\x99\f\x9Bw\f\xE2X\x02h\xC4T*,]lK\xC8\xBC\x04\x8F\nD'x\xDCK>\x01\xBE\xAC\xF7\x8EzP\xC6>w\xD9e$\xD5\x1A\x18\xA1\x84q\x85\x98/T\x8BV\xE3\xFB,\xE20\x84\x06UU\xEA1\x8B\x84\x00\xE3\x1A\xC3\xA8\xC2\xAC\xC0x?Ght\xCCb\xA6\xCF\xF4k\xAE\xAF'\xDE\x1AM\xB7\xA8\x9Fvzy*B\x12{\xD2\xBE\xC9\x98|D8@\xBDI\xCD>\xDCe\xC7\x8BD\xF5\xA5\xD4f\x0E\xFDX\x9D19'\xD7\xFC\x81\a\xA3*\x1C<\xA4\x81\xA40\x81\xA1\xA0\x03\x02\x01\x17\xA2\x81\x99\x04\x81\x96m\xB5\xEA5Q&\x94\xF51'\xD1\x00Y\xEDl\xBC ,\x89pz\x14t\xC9\x05\x85\a\xF76S\xCD\x80j\xA1b\xE6s:}q\x83\x1D\x93\xC6t\xC5o{q\x1D\xCE\xD3\vF\x8B\xC1\x13V\xE7\xEE\x8C\xA2\xCC\xA6x\xDE~\x80#9g\xD8,:j\x12> \xC5\xAA\xD0\xAE\xD5^\xB6|\x83f\xFC\xC5e\x1E\xEAb\x97Hh\xDA\x8Eb|\x065}\xC53%\xBC\x93\x8Ad\x16-\xF4\xDE|V\xD0;\x13O/\x86u\x14`\x80Mw\xEB\x04\b\xE6A \xEE\x16\x0F\xE2+v\xD5\x14`-\xF6\xA8\xDE\xF2\xB5".b
              },
              {
                type: 128, value: "0\x05\xA0\x03\x01\x01\x00".b
              }
            ],
            req_body: {
              kdc_options: "P\x80\x00\x00".b,
              cname: { name_type: nil, name_string: [] },
              realm: 'DEMO.LOCAL',
              sname: { name_type: 1, name_string: ['krbtgt', 'DEMO.LOCAL'] },
              from: Time.parse('1970-01-01T00:00:00+00:00'),
              till: Time.parse('1970-01-01T00:00:00+00:00'),
              rtime: Time.parse('1970-01-01T00:00:00+00:00'),
              nonce: 2053110444,
              etype: [23],
              addresses: [],
              enc_authorization_data: {
                etype: 23,
                cipher: "\x8A0\x9D|\xA7\xE4\"6\rD\xF5\xD1:\x00\x8B7nR \xBC\xEA\x8Bpf\xC0\x90\xC4('1\xCF\x16,| |\xAA<\xE0\xC7j\xFB\xB9A\xB2\xD9\xA2\xD8Y\x92\xB5\x82\x17\x8A\x93VQ\x97\xF9\xAD\x1D\xC6\xC6\xBC\xA0D\x9B\xC5\xC1\xD81\xF1\x94\x887\v\xA5\xAFQ\xB0=\x9Am\xC0\xB2\xF1 3\xB7\x87z\xCF\xF7\xDE\xA0\x8B\x83\xAEvq8}BM\xDE\n\x03\xBE\xB7\x1C\xF4\x8C\x84\x165.`\xC4\x83\x17q\xE7\x00#\xFB\xA1\x01\xD3\xDA\xE0\x7F\xCD\x04=S\x85Nr\tc\xF4\x06\xD8Q\x15\xAB\x15\xECO\x80\xC5\xF3\xE2\x8A\x7F\x97\x0Fq\xED\f\xE9\x9F\x19\x14k=\x94J\xAE>\xB8\x1A3\xC4V\xCF6\xF8V\n\xE9\xAF\\\xB5B@r\xDE\xD5\x957\xA0\xE5\x93\xC32\xEF\x82\n\x0F\x1E\nu \xB6\x8D\xFC\xE2\xCE\xB3\x87\xDF\xA5\x04g\xF40\x1A\n\x198FZXF\xF44\xBA\xDBFN\xC4\xCC\xAA\xBC$\x85\xA5$\x84\x96\xA4uCF\x7F\x11\xCEG\x9F\xFA\x84\xCE\xB65\xCD\x95\x1E\x1D\x03\x88\x1D\xE3:S\x9B\xA5\e\x97\x83\xCF\xB3\x9E\x88\b\x86mH\x98\xEC\x8D\x83B\xAE\xC9\x92V\xD5\xA9\x90\x03G\xB8\xD7\x81\xF4n\x1Ems\x8A:\xC6\x0F\xB18\x99O\x06\x04\x11}\xA394\xA9\x9E\x8EH\xCCd\xF33<\v\x88>B\xF8t>\x92hg&\xEBF\xAA\xC81wK\xB1W\xEFI\xD3\x98\xF5S\xC0X\x19&\xB7\e\x8C\x17w\xBC\xE0 \xE9\x80\b\xE5\x92'rS \t\xC69\x02\x97K\nT\x8C-\f\xBDe\x9CaT\xEF\x90m\xC6Vb\xC8\x04\xD7k#\xD1\xB0\xC7\xE7\xE56\x96\x05\xF9F\x01\xC1\xAC\f\x96\x84\xAAl\x84X\xDE\xAD\xE72\x85,\xFD'\x1A\xDC9`\xBC^\r~\x1De\x7F!\xFA\xCD\xC30\xB3\xEE\x00\xC9\xF8\x1E\x0F\xB5g\x87\xA0\xAFF\xE3U\xFF\f\fc\x8E\xDB\xD9\x11\x9C\x17Z\x87\xB0\xF2QVb\x7F~dS\xAF\x04w\xFB\xEC\xA7\x96\x98\x93\x96\x109r\xF0D\xFAf\x7F\x00\xE0\xE9\x9F6\xBC\x81\x87.\xFBm\xC0\x9BR\xB2\x19\xA5\xBF\x8C\x0F3\x19\vA\xCE\xF5oo\xD7+\x04\xE0\xA7\xAD@2\x8D\xF3\xBE\x13\xC7\xC6!\xED#\x10\xC5\x1A\x9F\x82\x99b7q\xE4\xB8i\n\xA8\x88\xEB\xCB\xC0\x1C\xDFToLC\x90\x12\xCF)\xB0\xF1\xC9\xFDK^D\b%\x8DdE>\xBC~\xB1g\x80\xC39\x1E\xE8\xBF\xE0\x90p\xF8\x00\xCF\x18)\xABr\x01\fC\x02\v\x81{\x1A\xAC\xF5%3S\x86\xF5%\xEF\x7F\x1D\x1D\x05?\x128J?\x98\x03\xC8\x9F\xF3\x9B\x87\x80\xB2O\xCD==X\xB5".b
              }
            }
          }
        }

        expect(described_class.parse(valid_data).to_h).to eq(expected)
      end
    end
  end

  describe Kerberos::KrbCred do
    let(:valid_data) do
      "\x76\x82\x04\xa3\x30\x82\x04\x9f\xa0\x03\x02\x01\x05\xa1\x03\x02" \
      "\x01\x16\xa2\x82\x03\xa4\x30\x82\x03\xa0\x61\x82\x03\x9c\x30\x82" \
      "\x03\x98\xa0\x03\x02\x01\x05\xa1\x0a\x1b\x08\x44\x57\x2e\x4c\x4f" \
      "\x43\x41\x4c\xa2\x28\x30\x26\xa0\x03\x02\x01\x01\xa1\x1f\x30\x1d" \
      "\x1b\x08\x4d\x53\x53\x71\x6c\x53\x76\x63\x1b\x11\x64\x63\x31\x2e" \
      "\x64\x77\x2e\x6c\x6f\x63\x61\x6c\x3a\x31\x34\x33\x33\xa3\x82\x03" \
      "\x59\x30\x82\x03\x55\xa0\x03\x02\x01\x17\xa1\x03\x02\x01\x02\xa2" \
      "\x82\x03\x47\x04\x82\x03\x43\x7e\xd2\xbf\xc0\xa5\x14\x86\x74\x5a" \
      "\xa1\xbc\xcb\xd3\xe1\x71\xc3\x1d\x38\x83\x58\x49\x85\x8a\x3f\xb4" \
      "\xfe\x0b\x6f\x81\x75\x46\x91\x66\xb3\xac\x48\x84\xe3\xe4\x8c\xc4" \
      "\x82\x5c\x00\x8c\x05\x46\xe7\xf2\x08\xd1\xfb\x70\xcc\x0a\x92\xf0" \
      "\x60\x1c\xcc\x45\x00\x1f\x0e\xa2\x66\xcb\x31\xc7\x03\x31\x15\xa0" \
      "\x6f\xdc\xf2\x80\x44\xe8\xbc\x68\x3b\xef\x16\xc8\x87\x75\x8a\x2c" \
      "\xe6\xe2\x97\x19\x0b\x48\xab\x3f\xde\xbb\xab\x85\xd3\x3c\x7c\x63" \
      "\x96\x67\xbb\x9e\xa9\x96\xca\x4c\x1f\x1f\x99\x03\xe7\x6a\x88\xaa" \
      "\x9a\x53\x93\x47\xfa\xfb\x99\xa8\x87\xdd\x90\x65\xd8\x0c\x0d\xff" \
      "\x23\x17\x1d\xf5\x9a\x44\x2e\x2d\x77\x9d\xb4\x9e\x2b\x3d\xfc\x13" \
      "\x5f\x43\x15\xc6\xe4\x3c\x23\x32\x7c\x0d\x18\x3b\x2e\x78\x3b\x69" \
      "\x23\x0e\x3c\xc2\xbe\x2b\x65\x10\xc4\x70\x38\x81\x02\xa5\x50\xf2" \
      "\xa2\x05\xe2\xa3\xe0\x29\xf8\x01\x96\xda\x15\xe7\xb5\x4e\x3f\x87" \
      "\xc3\x94\x8d\x49\x19\x46\xfa\xdb\x26\xbe\xad\x2e\xf1\x98\xad\xb0" \
      "\xb2\x6b\x83\x3f\xce\x4f\x4d\x02\xd2\xf2\xac\x33\xd7\x82\x22\x51" \
      "\xb3\x99\x02\x20\xc6\xe8\x81\x34\x7d\xc8\xac\xe9\x15\xa6\xb1\xb4" \
      "\x4e\x22\x86\x00\xcc\xde\x8e\x41\x8c\x0e\xe2\xae\xab\xe2\x09\x2b" \
      "\x8b\x9e\xa1\xbc\x08\xdb\x58\x72\x53\x1c\x7c\x10\x53\xaf\x40\xd6" \
      "\xc7\x59\x80\x5b\x58\x81\x42\xec\x4b\x21\x43\x73\x0f\x65\xaf\x59" \
      "\xee\x7c\x5b\xfe\x70\x4f\xa8\xd7\x0e\x17\x9c\xa4\x5a\x5d\xbc\xf7" \
      "\x97\x02\x84\x85\x16\x4a\x4d\x32\xaf\xd4\xf1\x3f\xcc\x81\xf0\xd4" \
      "\x6c\xda\x31\xf2\x19\xee\x7b\xe6\x59\xcf\x36\x57\x73\x2d\xb1\xf0" \
      "\x01\x6f\x97\xb3\xac\xe3\xd2\x06\x16\x80\xc1\x46\x92\x09\x74\x35" \
      "\xaa\x25\x52\xba\x0e\xfe\xc4\xa0\xa7\x7f\x8d\x46\x6e\xc6\xbc\x18" \
      "\x6f\x14\xd0\x84\x04\x7b\x43\xfe\x7e\x47\x51\x16\xd6\xd5\x8e\x3d" \
      "\x2d\x7e\x20\xe7\x53\x08\x78\xde\x81\x27\x99\x4a\xcf\xb3\xb6\xbb" \
      "\xa0\x7b\xe6\x29\x44\x0f\xd3\xcf\x35\xe6\xa2\x52\x80\x53\x64\x94" \
      "\xc5\xd6\xaf\x33\xcc\xb7\x87\x42\x8c\xec\xda\xcf\xd3\xd1\xbc\xb6" \
      "\xb6\xfa\x70\xc4\xff\x82\x25\x5c\x84\x97\x68\xf8\xa5\xbf\x37\xa6" \
      "\x86\x96\x95\x78\x2f\xc3\xa8\xe9\xd0\x5c\x9a\x3e\x36\x84\x98\x53" \
      "\xea\xa4\xea\x56\x14\x9b\x55\xd5\x2c\x00\xe1\x97\x00\x40\x6d\x85" \
      "\xb2\x92\xe2\xd0\x94\x1a\x4e\x7f\xd4\x9b\x2a\x21\xaa\x91\x80\x74" \
      "\x76\xe7\x92\x42\x78\xad\x82\xc8\xe2\xc0\x68\xb2\x03\xdc\xd9\xc7" \
      "\xdc\x35\x21\x23\x45\x85\xce\xe0\xd3\x37\x5a\x3a\x28\x18\x09\xf3" \
      "\xfb\xc8\x24\xf5\x90\x17\x18\xf7\xe3\x20\xab\x77\x6d\x8f\xea\x65" \
      "\x07\x13\x89\xed\xd2\xbc\xfa\x58\x13\x33\x44\x71\xdf\xe6\xce\xb4" \
      "\x23\x59\x15\x1a\xb0\x88\xad\x15\x7c\x26\xb0\xe1\xd8\x3a\x97\xac" \
      "\x8d\xe8\x92\x73\xcc\xff\xae\x6d\x7f\x17\xfa\x3b\xbf\xc5\xfd\xd3" \
      "\x55\xc4\x2b\x79\xef\x2a\x79\x44\xb6\x27\x34\x34\xca\x24\x92\x63" \
      "\x75\x4b\x05\x42\xd8\x71\xaf\x5c\x5e\x50\xf0\x28\x74\xde\x84\xf9" \
      "\x7b\x19\x8f\x1f\x77\x88\x06\xac\xf3\xce\x60\x83\x92\x03\x41\x4b" \
      "\x28\xc3\x3c\x04\x92\x66\x76\x95\xc4\xa4\x23\x2e\xa8\xc3\xd8\xe7" \
      "\x4f\x81\x25\x83\xbe\x22\x01\x67\x89\x44\x79\xa9\x7b\x4f\xea\x3a" \
      "\x3e\x52\x8a\x9b\x8e\x39\xec\xa3\xac\x71\xe3\xf1\xfb\x03\x09\x45" \
      "\x96\x7d\x69\xe7\xca\x6a\xa8\x6c\x52\x6b\x74\x6b\x53\xa1\xb6\x03" \
      "\x59\x3a\x01\x52\x70\x14\x79\x4a\x46\xb7\x00\x88\xf5\x3f\x4b\xc6" \
      "\x2d\xee\x59\xfd\x22\xb3\x74\xbe\xc0\xe6\xbd\xd0\x8a\x17\xf6\xd9" \
      "\xcb\xf7\x71\x41\x29\xd4\x23\x14\x02\x2e\xd6\x28\xf4\xbb\x49\xf3" \
      "\x42\xaf\x50\x2d\x7a\xb8\xe0\x52\xd3\x77\x67\x3e\x7f\x2c\x07\x75" \
      "\x4b\xa0\x79\x31\x5f\xd9\x6b\x42\x1b\x6d\x96\xc2\xe9\x0c\x1e\xa4" \
      "\x4b\x5d\xf5\x79\x7a\x17\x84\x0f\x67\xb7\xc2\xd0\x4e\xd0\x4e\x31" \
      "\x30\xe8\xa8\x3d\xe4\x05\x6f\x2d\xe9\xba\x17\x94\xa3\x0c\xf7\x0f" \
      "\x84\xcb\xcb\x2d\x9d\xf6\x15\xce\x81\xd1\xa3\x81\xea\x30\x81\xe7" \
      "\xa0\x03\x02\x01\x17\xa2\x81\xdf\x04\x81\xdc\x7d\x81\xd9\x30\x81" \
      "\xd6\xa0\x81\xd3\x30\x81\xd0\x30\x81\xcd\xa0\x1b\x30\x19\xa0\x03" \
      "\x02\x01\x17\xa1\x12\x04\x10\x6e\x57\x57\x69\x43\x61\x76\x62\x44" \
      "\x6e\x49\x55\x48\x64\x55\x74\xa1\x0a\x1b\x08\x44\x57\x2e\x4c\x4f" \
      "\x43\x41\x4c\xa2\x17\x30\x15\xa0\x03\x02\x01\x01\xa1\x0e\x30\x0c" \
      "\x1b\x0a\x66\x61\x6b\x65\x5f\x6d\x79\x73\x71\x6c\xa3\x07\x03\x05" \
      "\x00\x50\xa0\x00\x00\xa4\x11\x18\x0f\x32\x30\x32\x32\x30\x39\x31" \
      "\x31\x32\x30\x35\x38\x33\x39\x5a\xa5\x11\x18\x0f\x32\x30\x32\x32" \
      "\x30\x39\x31\x31\x32\x30\x35\x38\x33\x39\x5a\xa6\x11\x18\x0f\x32" \
      "\x30\x33\x32\x30\x39\x30\x38\x32\x30\x35\x38\x33\x39\x5a\xa7\x11" \
      "\x18\x0f\x32\x30\x33\x32\x30\x39\x30\x38\x32\x30\x35\x38\x33\x39" \
      "\x5a\xa8\x0a\x1b\x08\x44\x57\x2e\x4c\x4f\x43\x41\x4c\xa9\x28\x30" \
      "\x26\xa0\x03\x02\x01\x01\xa1\x1f\x30\x1d\x1b\x08\x4d\x53\x53\x71" \
      "\x6c\x53\x76\x63\x1b\x11\x64\x63\x31\x2e\x64\x77\x2e\x6c\x6f\x63" \
      "\x61\x6c\x3a\x31\x34\x33\x33"
        .b
    end

    it_behaves_like 'a model that produces the same binary data when to_der is called'

    describe '#parse' do
      it 'parses the data successfully' do
        expected = {
          KrbCred: {
            pvno: 5,
            msg_type: 22,
            tickets: [
              {
                tkt_vno: 5,
                realm: 'DW.LOCAL',
                sname: {
                  name_type: 1,
                  name_string: ['MSSqlSvc', 'dc1.dw.local:1433']
                },
                enc_part: {
                  etype: 23,
                  kvno: 2,
                  cipher: "~\xD2\xBF\xC0\xA5\x14\x86tZ\xA1\xBC\xCB\xD3\xE1q\xC3\x1D8\x83XI\x85\x8A?\xB4\xFE\vo\x81uF\x91f\xB3\xACH\x84\xE3\xE4\x8C\xC4\x82\\\x00\x8C\x05F\xE7\xF2\b\xD1\xFBp\xCC\n\x92\xF0`\x1C\xCCE\x00\x1F\x0E\xA2f\xCB1\xC7\x031\x15\xA0o\xDC\xF2\x80D\xE8\xBCh;\xEF\x16\xC8\x87u\x8A,\xE6\xE2\x97\x19\vH\xAB?\xDE\xBB\xAB\x85\xD3<|c\x96g\xBB\x9E\xA9\x96\xCAL\x1F\x1F\x99\x03\xE7j\x88\xAA\x9AS\x93G\xFA\xFB\x99\xA8\x87\xDD\x90e\xD8\f\r\xFF#\x17\x1D\xF5\x9AD.-w\x9D\xB4\x9E+=\xFC\x13_C\x15\xC6\xE4<#2|\r\x18;.x;i#\x0E<\xC2\xBE+e\x10\xC4p8\x81\x02\xA5P\xF2\xA2\x05\xE2\xA3\xE0)\xF8\x01\x96\xDA\x15\xE7\xB5N?\x87\xC3\x94\x8DI\x19F\xFA\xDB&\xBE\xAD.\xF1\x98\xAD\xB0\xB2k\x83?\xCEOM\x02\xD2\xF2\xAC3\xD7\x82\"Q\xB3\x99\x02 \xC6\xE8\x814}\xC8\xAC\xE9\x15\xA6\xB1\xB4N\"\x86\x00\xCC\xDE\x8EA\x8C\x0E\xE2\xAE\xAB\xE2\t+\x8B\x9E\xA1\xBC\b\xDBXrS\x1C|\x10S\xAF@\xD6\xC7Y\x80[X\x81B\xECK!Cs\x0Fe\xAFY\xEE|[\xFEpO\xA8\xD7\x0E\x17\x9C\xA4Z]\xBC\xF7\x97\x02\x84\x85\x16JM2\xAF\xD4\xF1?\xCC\x81\xF0\xD4l\xDA1\xF2\x19\xEE{\xE6Y\xCF6Ws-\xB1\xF0\x01o\x97\xB3\xAC\xE3\xD2\x06\x16\x80\xC1F\x92\tt5\xAA%R\xBA\x0E\xFE\xC4\xA0\xA7\x7F\x8DFn\xC6\xBC\x18o\x14\xD0\x84\x04{C\xFE~GQ\x16\xD6\xD5\x8E=-~ \xE7S\bx\xDE\x81'\x99J\xCF\xB3\xB6\xBB\xA0{\xE6)D\x0F\xD3\xCF5\xE6\xA2R\x80Sd\x94\xC5\xD6\xAF3\xCC\xB7\x87B\x8C\xEC\xDA\xCF\xD3\xD1\xBC\xB6\xB6\xFAp\xC4\xFF\x82%\\\x84\x97h\xF8\xA5\xBF7\xA6\x86\x96\x95x/\xC3\xA8\xE9\xD0\\\x9A>6\x84\x98S\xEA\xA4\xEAV\x14\x9BU\xD5,\x00\xE1\x97\x00@m\x85\xB2\x92\xE2\xD0\x94\x1AN\x7F\xD4\x9B*!\xAA\x91\x80tv\xE7\x92Bx\xAD\x82\xC8\xE2\xC0h\xB2\x03\xDC\xD9\xC7\xDC5!#E\x85\xCE\xE0\xD37Z:(\x18\t\xF3\xFB\xC8$\xF5\x90\x17\x18\xF7\xE3 \xABwm\x8F\xEAe\a\x13\x89\xED\xD2\xBC\xFAX\x133Dq\xDF\xE6\xCE\xB4#Y\x15\x1A\xB0\x88\xAD\x15|&\xB0\xE1\xD8:\x97\xAC\x8D\xE8\x92s\xCC\xFF\xAEm\x7F\x17\xFA;\xBF\xC5\xFD\xD3U\xC4+y\xEF*yD\xB6'44\xCA$\x92cuK\x05B\xD8q\xAF\\^P\xF0(t\xDE\x84\xF9{\x19\x8F\x1Fw\x88\x06\xAC\xF3\xCE`\x83\x92\x03AK(\xC3<\x04\x92fv\x95\xC4\xA4#.\xA8\xC3\xD8\xE7O\x81%\x83\xBE\"\x01g\x89Dy\xA9{O\xEA:>R\x8A\x9B\x8E9\xEC\xA3\xACq\xE3\xF1\xFB\x03\tE\x96}i\xE7\xCAj\xA8lRktkS\xA1\xB6\x03Y:\x01Rp\x14yJF\xB7\x00\x88\xF5?K\xC6-\xEEY\xFD\"\xB3t\xBE\xC0\xE6\xBD\xD0\x8A\x17\xF6\xD9\xCB\xF7qA)\xD4#\x14\x02.\xD6(\xF4\xBBI\xF3B\xAFP-z\xB8\xE0R\xD3wg>\x7F,\auK\xA0y1_\xD9kB\em\x96\xC2\xE9\f\x1E\xA4K]\xF5yz\x17\x84\x0Fg\xB7\xC2\xD0N\xD0N10\xE8\xA8=\xE4\x05o-\xE9\xBA\x17\x94\xA3\f\xF7\x0F\x84\xCB\xCB-\x9D\xF6\x15\xCE\x81\xD1".b
                }
              }
            ],
            enc_part: {
              etype: 23,
              # TODO: This isn't cipher text, use a better KrbCred
              cipher: "}\x81\xD90\x81\xD6\xA0\x81\xD30\x81\xD00\x81\xCD\xA0\e0\x19\xA0\x03\x02\x01\x17\xA1\x12\x04\x10nWWiCavbDnIUHdUt\xA1\n\e\bDW.LOCAL\xA2\x170\x15\xA0\x03\x02\x01\x01\xA1\x0E0\f\e\nfake_mysql\xA3\a\x03\x05\x00P\xA0\x00\x00\xA4\x11\x18\x0F20220911205839Z\xA5\x11\x18\x0F20220911205839Z\xA6\x11\x18\x0F20320908205839Z\xA7\x11\x18\x0F20320908205839Z\xA8\n\e\bDW.LOCAL\xA9(0&\xA0\x03\x02\x01\x01\xA1\x1F0\x1D\e\bMSSqlSvc\e\x11dc1.dw.local:1433".b
            }
          }
        }

        expect(described_class.parse(valid_data).to_h).to eq(expected)
      end
    end
  end

  describe Kerberos::EncKrbCredPart do
    let(:valid_data) do
      "\x7d\x81\xd9\x30\x81\xd6\xa0\x81\xd3\x30\x81\xd0\x30\x81\xcd\xa0" \
      "\x1b\x30\x19\xa0\x03\x02\x01\x17\xa1\x12\x04\x10\x6e\x57\x57\x69" \
      "\x43\x61\x76\x62\x44\x6e\x49\x55\x48\x64\x55\x74\xa1\x0a\x1b\x08" \
      "\x44\x57\x2e\x4c\x4f\x43\x41\x4c\xa2\x17\x30\x15\xa0\x03\x02\x01" \
      "\x01\xa1\x0e\x30\x0c\x1b\x0a\x66\x61\x6b\x65\x5f\x6d\x79\x73\x71" \
      "\x6c\xa3\x07\x03\x05\x00\x50\xa0\x00\x00\xa4\x11\x18\x0f\x32\x30" \
      "\x32\x32\x30\x39\x31\x31\x32\x30\x35\x38\x33\x39\x5a\xa5\x11\x18" \
      "\x0f\x32\x30\x32\x32\x30\x39\x31\x31\x32\x30\x35\x38\x33\x39\x5a" \
      "\xa6\x11\x18\x0f\x32\x30\x33\x32\x30\x39\x30\x38\x32\x30\x35\x38" \
      "\x33\x39\x5a\xa7\x11\x18\x0f\x32\x30\x33\x32\x30\x39\x30\x38\x32" \
      "\x30\x35\x38\x33\x39\x5a\xa8\x0a\x1b\x08\x44\x57\x2e\x4c\x4f\x43" \
      "\x41\x4c\xa9\x28\x30\x26\xa0\x03\x02\x01\x01\xa1\x1f\x30\x1d\x1b" \
      "\x08\x4d\x53\x53\x71\x6c\x53\x76\x63\x1b\x11\x64\x63\x31\x2e\x64" \
      "\x77\x2e\x6c\x6f\x63\x61\x6c\x3a\x31\x34\x33\x33".b
    end

    it_behaves_like 'a model that produces the same binary data when to_der is called'

    describe '#parse' do
      it 'parses the data successfully' do
        expected = {
          EncKrbCredPart: {
            ticket_info: [
              {
                key: {
                  keytype: 23,
                  keyvalue: 'nWWiCavbDnIUHdUt'
                },
                prealm: 'DW.LOCAL',
                pname: {
                  name_type: 1,
                  name_string: ['fake_mysql']
                },
                flags: "P\xA0\x00\x00".b,
                authtime: Time.parse('2022-09-11T20:58:39+00:00'),
                starttime: Time.parse('2022-09-11T20:58:39+00:00'),
                endtime: Time.parse('2032-09-08T20:58:39+00:00'),
                renew_till: Time.parse('2032-09-08T20:58:39+00:00'),
                srealm: 'DW.LOCAL',
                sname: {
                  name_type: 1,
                  name_string: ['MSSqlSvc', 'dc1.dw.local:1433']
                },
                caddr: []
              }
            ],
            s_address: [],
            r_address: {
              etype: nil,
              cipher: nil
            }
          }
        }
        expect(described_class.parse(valid_data).to_h).to eq(expected)
      end
    end
  end

  describe Kerberos::KrbError do
    context 'when a generic error is parsed' do
      let(:valid_data) do
        "\x7e\x5a\x30\x58\xa0\x03\x02\x01\x05\xa1\x03\x02" \
          "\x01\x1e\xa4\x11\x18\x0f\x32\x30\x31\x34\x31\x32\x31\x34\x30\x36" \
          "\x35\x34\x30\x31\x5a\xa5\x05\x02\x03\x0b\x0d\x5b\xa6\x03\x02\x01" \
          "\x3c\xa9\x0c\x1b\x0a\x44\x45\x4d\x4f\x2e\x4c\x4f\x43\x41\x4c\xaa" \
          "\x1f\x30\x1d\xa0\x03\x02\x01\x02\xa1\x16\x30\x14\x1b\x06\x6b\x72" \
          "\x62\x74\x67\x74\x1b\x0a\x44\x45\x4d\x4f\x2e\x4c\x4f\x43\x41\x4c".b
      end

      it_behaves_like 'a model that produces the same binary data when to_der is called'

      describe '#parse' do
        it 'parses the data successfully' do
          expected = {
            KrbError: {
              pvno: 5,
              msg_type: 30,
              stime: Time.parse('2014-12-14T06:54:01+00:00'),
              susec: 724315,
              error_code: 60,
              cname: { name_type: nil, name_string: [] },
              realm: 'DEMO.LOCAL',
              sname: { name_type: 2, name_string: ['krbtgt', 'DEMO.LOCAL'] }
            }
          }
          expect(described_class.parse(valid_data).to_h).to eq(expected)
        end
      end
    end

    context 'when preauth failed' do
      let(:valid_data) do
        "\x7e\x81\x8d\x30\x81\x8a\xa0\x03\x02\x01\x05\xa1" \
        "\x03\x02\x01\x1e\xa4\x11\x18\x0f\x32\x30\x31\x34\x31\x32\x31\x34" \
        "\x32\x32\x34\x35\x32\x32\x5a\xa5\x05\x02\x03\x07\x5a\x47\xa6\x03" \
        "\x02\x01\x18\xa9\x0c\x1b\x0a\x44\x45\x4d\x4f\x2e\x4c\x4f\x43\x41" \
        "\x4c\xaa\x1f\x30\x1d\xa0\x03\x02\x01\x01\xa1\x16\x30\x14\x1b\x06" \
        "\x6b\x72\x62\x74\x67\x74\x1b\x0a\x44\x45\x4d\x4f\x2e\x4c\x4f\x43" \
        "\x41\x4c\xac\x30\x04\x2e\x30\x2c\x30\x16\xa1\x03\x02\x01\x0b\xa2" \
        "\x0f\x04\x0d\x30\x0b\x30\x09\xa0\x03\x02\x01\x17\xa1\x02\x04\x00" \
        "\x30\x12\xa1\x03\x02\x01\x13\xa2\x0b\x04\x09\x30\x07\x30\x05\xa0" \
        "\x03\x02\x01\x17".b
      end

      it_behaves_like 'a model that produces the same binary data when to_der is called'

      describe '#parse' do
        it 'parses the data successfully' do
          expected = {
            KrbError: {
              pvno: 5,
              msg_type: 30,
              stime: Time.parse('2014-12-14T22:45:22+00:00'),
              susec: 481863,
              error_code: 24,
              cname: {
                name_type: nil, name_string: []
              },
              realm: 'DEMO.LOCAL',
              sname: {
                name_type: 1,
                name_string: ['krbtgt', 'DEMO.LOCAL']
              },
              e_data: "0,0\x16\xA1\x03\x02\x01\v\xA2\x0F\x04\r0\v0\t\xA0\x03\x02\x01\x17\xA1\x02\x04\x000\x12\xA1\x03\x02\x01\x13\xA2\v\x04\t0\a0\x05\xA0\x03\x02\x01\x17".b
            }
          }
          expect(described_class.parse(valid_data).to_h).to eq(expected)
        end
      end
    end

    context 'when etext is present' do
      # Response from a kerberos server on Ubuntu
      let(:valid_data) do
        "\x7e\x81\x80\x30\x7e\xa0\x03\x02\x01\x05\xa1\x03\x02\x01\x1e\xa4" \
        "\x11\x18\x0f\x32\x30\x32\x32\x30\x36\x32\x31\x31\x30\x32\x34\x34" \
        "\x31\x5a\xa5\x05\x02\x03\x04\xe9\x68\xa6\x03\x02\x01\x06\xa7\x06" \
        "\x1b\x04\x44\x43\x30\x34\xa8\x14\x30\x12\xa0\x03\x02\x01\x01\xa1" \
        "\x0b\x30\x09\x1b\x07\x75\x6e\x69\x63\x6f\x64\x65\xa9\x06\x1b\x04" \
        "\x44\x43\x30\x34\xaa\x19\x30\x17\xa0\x03\x02\x01\x01\xa1\x10\x30" \
        "\x0e\x1b\x06\x6b\x72\x62\x74\x67\x74\x1b\x04\x44\x43\x30\x34\xab" \
        "\x12\x1b\x10\x43\x4c\x49\x45\x4e\x54\x5f\x4e\x4f\x54\x5f\x46\x4f" \
        "\x55\x4e\x44".b
      end

      it_behaves_like 'a model that produces the same binary data when to_der is called'

      describe '#parse' do
        it 'parses the data successfully' do
          expected = {
            KrbError: {
              pvno: 5,
              msg_type: 30,
              stime: Time.parse('2022-06-21T10:24:41+00:00'),
              susec: 321896,
              error_code: 6,
              crealm: 'DC04',
              cname: {
                name_type: 1,
                name_string: ['unicode']
              },
              realm: 'DC04',
              sname: {
                name_type: 1,
                name_string: ['krbtgt', 'DC04']
              },
              e_text: 'CLIENT_NOT_FOUND'
            }
          }
          expect(described_class.parse(valid_data).to_h).to eq(expected)
        end
      end
    end
  end
end
